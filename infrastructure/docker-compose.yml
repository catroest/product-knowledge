#
# Docker compose recipe for setting up the sample infrastructure
# See copyright notice in the top folder
# See authors file in the top folder
# See license file in the top folder
#

# that is the version of the docker compose runtime
version: "3.9"

services:

  #
  # https://download.ontotext.com/owlim/71864e00-43b9-11ed-9c34-42843b1b6b38/ontorefine-1.1.0-dist.zip
  #
  data-backend2:
    build:
      dockerfile: src/main/docker/Dockerfile
      context: ../dataspace/virtualize/druid
    image: ghcr.io/catenax-ng/product-knowledge/virtualizer-druid:0.8.1-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8888:8888" # http
      - "8889:8082" # jdbc
    profiles: ["backend"]
    volumes:
      - ./resources/druid.runtime.properties:/opt/druid/conf/druid/single-server/micro-quickstart/_common/common.runtime.properties
      - ./resources/data:/opt/druid/data

  db-backend:
    image: postgres
    environment:
      POSTGRES_PASSWORD: postgres
      PGPASSWD: postgres
    ports:
      - 5432:5432
    volumes:
      - ./resources/data:/tmp/data

  data-backend:
    build:
      dockerfile: src/main/docker/Dockerfile
      context: ../dataspace/virtualize/dremio
    image: ghcr.io/catenax-ng/product-knowledge/virtualizer-dremio:0.8.1-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "9047:9047" # http
      - "31010:31010" # jdbc
    profiles: ["backend"]
    volumes:
      - ./resources/dremio:/opt/dremio/data
      - ./resources/data:/opt/dremio/local/data
      - ./oem/resources/dremio.conf:/opt/dremio/conf/dremio.conf

#  search-backend:
#    build:
#      dockerfile: src/main/docker/Dockerfile
#      context: ../dataspace/agents/sparql-anything
#    image: ghcr.io/catenax-ng/product-knowledge/facadex-agent:0.8.1-SNAPSHOT
#    ports:
#      - "3000:3000"
#    volumes:
#      - ./resources/data/zag_fmea.xml:/opt/xyz/zag_fmea.xml

  graph-backend:
    image: ontotext/graphdb:10.1.4
    ports:
      - "7200:7200"

  #
  # Configures the provider agent
  #
  conforming-agent:
    build:
      dockerfile: src/main/docker/Dockerfile
      context: ../dataspace/agents/conforming
    image: ghcr.io/catenax-ng/product-knowledge/conforming-agent:0.8.1-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8898:8080" # sparql endpoint

  #
  # Configures the provider agent
  #
  provider-agent:
    build:
      dockerfile: src/main/docker/Dockerfile
      context: ../dataspace/agents/provisioning
    image: ghcr.io/catenax-ng/product-knowledge/provisioning-agent:0.8.1-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8080:8080" # sparql endpoint
      - "8081:8081" # possible second, third, ... sparql endpoint
      - "8082:8082" # possible second, third, ... sparql endpoint
      - "8083:8083" # possible second, third, ... sparql endpoint
      - "4039:4040" # DEBUG
    environment:
      # If you want to enable multiple endpoints, simply list them with spaces, like ONTOP_PORT: 8080 8082
      ONTOP_PORT: 8080 8081 8082 8083
      # Uncomment to enable for debugging, please choose a different port for each endpoint
      #JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040 #-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:4040
      # If you want to enable multiple ontologies, simply list them with spaces, like ONTOP_ONTOLOGY_FILE: /input/cx-ontology.xml /input/cx-ontology2.xml 
      ONTOP_ONTOLOGY_FILE: /opt/ontop/input/cx-ontology.xml /opt/ontop/input/cx-ontology.ttl /opt/ontop/input/cx-ontology-minimal.ttl /opt/ontop/input/cx-ontology.ttl
      # If you want to enable multiple mappings, simply list them with spaces, like ONTOP_MAPPING_FILE: /input/dtc.obda /input/loadspectrum.obda 
      ONTOP_MAPPING_FILE: /opt/ontop/input/dtc.obda /opt/ontop/input/hi.obda /opt/ontop/input/trace.obda /opt/ontop/input/quality.obda
      # If you want to enable multiple settings, simply list them with spaces, like ONTOP_PROPERTIES_FILE: /input/settings.properties /input/settings.dremio.properties
      ONTOP_PROPERTIES_FILE: /opt/ontop/input/settings.local.properties /opt/ontop/input/settings.dremio.properties /opt/ontop/input/settings.dremio.properties /opt/ontop/input/settings.dremio.properties
      # If you want to enable multiple portals, simply list them with spaces, like ONTOP_PORTAL_FILE: /input/portal.toml /input/portal2.toml 
      ONTOP_PORTAL_FILE: /opt/ontop/input/portal.toml /opt/ontop/input/portal.toml /opt/ontop/input/portal.toml /opt/ontop/input/portal.toml
      # If you want to enable different developer modes, simply list them with spaces, like NTOP_DEV_MODE: true false 
      ONTOP_DEV_MODE: true true true true
    volumes:
      - ./resources/cx-ontology.xml:/opt/ontop/input/cx-ontology.xml
      - ./resources/cx-ontology.ttl:/opt/ontop/input/cx-ontology.ttl
      - ./resources/cx-ontology-minimal.ttl:/opt/ontop/input/cx-ontology-minimal.ttl
      - ./oem/resources/dtc.obda:/opt/ontop/input/dtc.obda
      - ./oem/resources/hi.obda:/opt/ontop/input/hi.obda
      - ./oem/resources/hi.psql.obda:/opt/ontop/input/hi.psql.obda
      - ./oem/resources/trace.obda:/opt/ontop/input/trace.obda
      - ./oem/resources/quality.obda:/opt/ontop/input/quality.obda
      - ./oem/resources/settings.local.properties:/opt/ontop/input/settings.local.properties
      - ./oem/resources/settings.dremio.properties:/opt/ontop/input/settings.dremio.properties
      - ./oem/resources/settings.druid.properties:/opt/ontop/input/settings.druid.properties
      - ./oem/resources/settings.psql.properties:/opt/ontop/input/settings.psql.properties
      - ./oem/resources/portal.toml:/opt/ontop/input/portal.toml
      - ./oem/resources/logback.xml:/opt/ontop/log/logback.xml

  #
  # Configures the AAS bridge
  #
  aas-bridge:
    build:
      dockerfile: src/main/docker/Dockerfile
      context: ../dataspace/aas-bridge
      args:
        JAR: target/aas-bridge.jar
        LIB: target/lib
        PROVIDER_CREDENTIAL_BASIC_ARG: Basic Zm9vOg==
        #PROVIDER_SPARQL_ENDPOINT_ARG: http://oem-data-plane:8082/api/agent
        PROVIDER_SPARQL_ENDPOINT_ARG: https://knowledge.dev.demo.catena-x.net/oem-edc-data/BPNL00000003COJN/api/agent
        #PROVIDER_AGENT_PLANE_ARG: http://provider-agent:8082/sparql
        PROVIDER_AGENT_PLANE_ARG: http://oem-provider-agent:8082/sparql
    image: ghcr.io/catenax-ng/product-knowledge/aas-bridge:0.8.1-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8700:8080" # AAS-API
      - "4048:4040" # DEBUG
    environment:
      #PROVIDER_SPARQL_ENDPOINT: http://oem-data-plane:8082/api/agent
      #PROVIDER_AGENT_PLANE: http://provider-agent:8082/sparql
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
      TIMEOUT_SECONDS: 30
    #volumes:

  #
  # Configures the oem control plane (provider)
  #
  oem-control-plane:
    build:
      dockerfile: src/main/docker/Dockerfile
      context: ../dataspace/edc/control-plane/controlplane-memory
      args:
        JAR: target/controlplane-memory.jar
        LIB: target/lib
    image: ghcr.io/catenax-ng/product-knowledge/controlplane-memory:0.8.1-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8090:8080" # API
      - "8091:8181" # PUBLIC
      - "8092:8182" # VALIDATION
      - "8093:8282" # IDS
      - "8094:9998" # METRICS
      - "8095:9999" # CONTROL
      - "4040:4040" # DEBUG
    environment:
      # If you want to enable multiple endpoints, simply list them with spaces, like ONTOP_PORT: 8080 8082
      EDC_FS_CONFIG: /app/configuration.properties
      # Uncomment to enable for debugging, please choose a different port for each endpoint
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
    volumes:
      - ./oem/resources/controlplane.properties:/app/configuration.properties
      - ./resources/opentelemetry.properties:/app/opentelemetry.properties
      - ./resources/logging.properties:/app/logging.properties

  #
  # Configures the oem control plane (consumer)
  #
  oem-control-plane2:
    build:
      dockerfile: src/main/docker/Dockerfile
      context: ../dataspace/edc/control-plane/controlplane-memory
      args:
        JAR: target/controlplane-memory.jar
        LIB: target/lib
    image: ghcr.io/catenax-ng/product-knowledge/controlplane-memory:0.8.1-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8096:8080" # API
      - "8097:8181" # PUBLIC
      - "8098:8182" # VALIDATION
      - "8099:8282" # IDS
      - "4047:4040" # DEBUG
    environment:
      # If you want to enable multiple endpoints, simply list them with spaces, like ONTOP_PORT: 8080 8082
      EDC_FS_CONFIG: /app/configuration.properties      
      # Uncomment to enable for debugging, please choose a different port for each endpoint
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
    volumes:
      - ./oem/resources/controlplane2.properties:/app/configuration.properties
      - ./resources/opentelemetry.properties:/app/opentelemetry.properties
      - ./resources/logging.properties:/app/logging.properties

  #
  # Configures the OEM data plane
  #
  oem-data-plane:
    build:
      dockerfile: src/main/docker/Dockerfile
      context: ../dataspace/edc/agent-plane/agentplane-azurevault
      args:
        JAR: target/agentplane-azure-vault.jar
        LIB: target/lib
    image: ghcr.io/catenax-ng/product-knowledge/agentplane-azure-vault:0.8.1-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8100:8082"  # API/sparql endpoint
      - "8101:8185"  # PUBLIC
      - "8102:8186"  # AGREEMENT CALLBACK
      - "8103:9999" # CONTROL
      - "4041:4040"  # DEBUG
    environment:
      # If you want to enable multiple endpoints, simply list them with spaces, like ONTOP_PORT: 8080 8082
      EDC_FS_CONFIG: /app/configuration.properties
      # Uncomment to enable for debugging, please choose a different port for each endpoint
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
    volumes:
      - ./oem/resources/dataplane.properties:/app/configuration.properties
      - ./resources/dataspace_local.ttl:/app/dataspace.ttl
      - ./resources/opentelemetry.properties:/app/opentelemetry.properties
      - ./resources/logging.properties:/app/logging.properties

  #
  # Configures the tiera backend 
  #
  service-backend:
    build:
      dockerfile: src/main/docker/Dockerfile
      context: ../dataspace/mock/prognosis
    image: ghcr.io/catenax-ng/product-knowledge/prognosis:0.8.1-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "5005:5005" # API

  #
  # Configures the tier1 agent 
  #
  remoting-agent:
    build:
      dockerfile: src/main/docker/Dockerfile
      context: ../dataspace/agents/remoting
    image: ghcr.io/catenax-ng/product-knowledge/remoting-agent:0.8.1-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8200:8081" # sparql endpoint
      - "4042:4040" # debugging endpoint
    environment:
      # dummy environment var
      FOO: bar
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
    volumes:
      - ./tiera/resources/rdf4j/conf:/var/rdf4j/server/conf
      - ./tiera/resources/rdf4j/repositories:/var/rdf4j/server/repositories

  #
  # Configures the tiera control plane
  #
  tiera-control-plane:
    build:
      dockerfile: src/main/docker/Dockerfile
      context: ../dataspace/edc/control-plane/controlplane-memory
      args:
        JAR: target/controlplane-memory.jar
        LIB: target/lib
    image: ghcr.io/catenax-ng/product-knowledge/controlplane-memory:0.8.1-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8300:8080" # API
      - "8301:8181" # PUBLIC
      - "8302:8182" # VALIDATION
      - "8303:8282" # IDS
      - "8304:9998" # METRICS
      - "8305:9999" # CONTROL
      - "4043:4040" # DEBUG
    environment:
      # If you want to enable multiple endpoints, simply list them with spaces, like ONTOP_PORT: 8080 8082
      EDC_FS_CONFIG: /app/configuration.properties
      # Uncomment to enable for debugging, please choose a different port for each endpoint
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
    volumes:
      - ./tiera/resources/controlplane.properties:/app/configuration.properties
      - ./resources/opentelemetry.properties:/app/opentelemetry.properties
      - ./resources/logging.properties:/app/logging.properties

  #
  # Configures the supplier data plane
  #
  tiera-data-plane:
    build:
      dockerfile: src/main/docker/Dockerfile
      context: ../dataspace/edc/agent-plane/agentplane-azurevault
      args:
        JAR: target/agentplane-azure-vault.jar
        LIB: target/lib
    image: ghcr.io/catenax-ng/product-knowledge/agentplane-azure-vault:0.8.1-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8400:8082"  # API/sparql endpoint
      - "8401:8185"  # PUBLIC
      - "8402:8186"  # AGREEMENT CALLBACK
      - "8403:9999" # CONTROL
      - "4044:4040"  # DEBUG
    environment:
      # If you want to enable multiple endpoints, simply list them with spaces, like ONTOP_PORT: 8080 8082
      EDC_FS_CONFIG: /app/configuration.properties
      # Uncomment to enable for debugging, please choose a different port for each endpoint
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
    volumes:
      - ./tiera/resources/dataplane.properties:/app/configuration.properties
      - ./resources/dataspace_local.ttl:/app/dataspace.ttl
      - ./resources/opentelemetry.properties:/app/opentelemetry.properties
      - ./resources/logging.properties:/app/logging.properties

  #
  # Configures the consumer control plane
  #
  consumer-control-plane:
    build:
      dockerfile: src/main/docker/Dockerfile
      context: ../dataspace/edc/control-plane/controlplane-memory
      args:
        JAR: target/controlplane-memory.jar
        LIB: target/lib
    image: ghcr.io/catenax-ng/product-knowledge/controlplane-memory:0.8.1-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8500:8080" # API
      - "8501:8181" # PUBLIC
      - "8502:8182" # VALIDATION
      - "8503:8282" # IDS
      - "8504:9998" # METRICS
      - "8505:9999" # CONTROL
      - "4045:4040" # DEBUG
    environment:
      # If you want to enable multiple endpoints, simply list them with spaces, like ONTOP_PORT: 8080 8082
      EDC_FS_CONFIG: /app/configuration.properties
      # Uncomment to enable for debugging, please choose a different port for each endpoint
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
    volumes:
      - ./consumer/resources/controlplane.properties:/app/configuration.properties
      - ./resources/opentelemetry.properties:/app/opentelemetry.properties
      - ./resources/logging.properties:/app/logging.properties

  #
  # Configures the consumer data plane
  #
  consumer-data-plane:
    build:
      dockerfile: src/main/docker/Dockerfile
      context: ../dataspace/edc/agent-plane/agentplane-azurevault
      args:
        JAR: target/agentplane-azure-vault.jar
        LIB: target/lib
    image: ghcr.io/catenax-ng/product-knowledge/agentplane-azure-vault:0.8.1-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    ports:
      - "8600:8082"  # API/sparql endpoint
      - "8601:8185"  # PUBLIC
      - "8602:8186"  # AGREEMENT CALLBACK
      - "8603:9999" # CONTROL
      - "4046:4040"  # DEBUG
    environment:
      # If you want to enable multiple endpoints, simply list them with spaces, like ONTOP_PORT: 8080 8082
      EDC_FS_CONFIG: /app/configuration.properties      
      # Uncomment to enable for debugging, please choose a different port for each endpoint
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:4040
    volumes:
      - ./consumer/resources/dataplane.properties:/app/configuration.properties
      - ./resources/dataspace_local.ttl:/app/dataspace.ttl
      - ./resources/opentelemetry.properties:/app/opentelemetry.properties
      - ./resources/logging.properties:/app/logging.properties

  consumer-frontend:
    build:
      dockerfile: src/main/docker/Dockerfile
      context: ../ux
    image: ghcr.io/catenax-ng/product-knowledge/ux:0.8.1-SNAPSHOT
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    environment:
      REACT_APP_SKILL_CONNECTOR_DATA: http://localhost:8500
      REACT_APP_SKILL_CONNECTOR_CONTROL: http://localhost:8600
      REACT_APP_SKILL_CONNECTOR_AUTH_HEADER_KEY: X-Api-Key
      REACT_APP_SKILL_CONNECTOR_AUTH_HEADER_VALUE: foo
      REACT_APP_SKILL_BACKEND: http://localhost:3000/webvowl/index.html
      REACT_APP_SKILL_GITHUB_ONTOLOGYHUB: https://api.github.com/repos/catenax-ng/product-knowledge/contents/ontology
      REACT_APP_FOLDER: /consumer-frontend
    ports:
      - "3000:8080"  # http
