{
	"info": {
		"_postman_id": "a2376d9b-4be7-4bd8-b67b-3983e596ef9c",
		"name": "Rollout (Upcoming Release 0.8)",
		"description": "A collection of API calls against various services of the Knowledge Agents Pilot.\n\nAlso contains a special integration test subfolder.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2757771"
	},
	"item": [
		{
			"name": "Dataspace",
			"item": [
				{
					"name": "OEM (Data Providing Agent)",
					"item": [
						{
							"name": "Provisioning Agent (Intern)",
							"item": [
								{
									"name": "Query Trouble Code Endpoint/Asset",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag: <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT ?reason ?code ?description ?version ?partend ?partcat ?partclass WHERE {\n  # Select Business Partner\n  ?Oem cx:BPNL \"BPNL00000003COJN\".\n\n  # Search for Trouble Codes of the Business Partner\n  # related to a cause in the \"Kabelbaum\"\n  ?Dtc rdf:type cx-diag:DTC.\n  ?Dtc cx:provisionedBy ?Oem.\n  ?Dtc cx-diag:PossibleCauses ?reason.\n  FILTER contains(?reason,\"Kabelbaum\").\n  ?Dtc cx-diag:Code ?code.\n  ?Dtc cx-diag:Description ?description.\n  ?Dtc cx-diag:Version ?version.\n\n  # Navigate to the affected parts\n  # and show only parts with a classification \"Powertrain\"\n  ?Dtc cx-diag:affects ?Part.\n  ?Part cx-diag:Category ?partcat.\n  ?Part cx-diag:EnDenomination ?partend.\n  ?Part cx-diag:Classification ?partclass.\n  FILTER contains(?partclass,'Powertrain').\n\n} LIMIT 40\n"
										},
										"url": {
											"raw": "{{provisioningAgent}}/sparql",
											"host": [
												"{{provisioningAgent}}"
											],
											"path": [
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Query Vehicle Monitoring Endpoint/Asset",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?vehicle ?van ?adaption ?aggregate ?assembly ?supplier ?lc ?lcv ?operatingTime ?mileage ?recordDate ?healthType ?project ?body_count ?body_classes ?countUnit ?countMethod ?channels WHERE {\n\n  VALUES (?van ?aggregate ?healthType) { \n      (\"FNLQNRVCOFLHAQ\"^^xsd:string \"Differential Gear\"^^xsd:string \"Clutch\"^^xsd:string) \n      (\"FGPTXINYZAVJYK\"^^xsd:string \"Differential Gear\"^^xsd:string \"Clutch\"^^xsd:string) \n      (\"DVAJDTLJMKKZGY\"^^xsd:string \"Differential Gear\"^^xsd:string \"GearOil\"^^xsd:string) \n      (\"FKUBNDMDXQNFHI\"^^xsd:string \"Differential Gear\"^^xsd:string \"GearSet\"^^xsd:string)  \n  }\n  \n  ?vehicle rdf:type cx:Vehicle;\n           cx:vehicleIdentificationNumber ?van.\n\n  ?assembly rdf:type cx:AssemblyGroup;\n            cx:partName ?aggregate;\n            cx:isPartOf ?vehicle;\n            cx:isProducedBy ?supplier;\n            cx:hasLoadSpectrum ?lc.\n\n  ?lc rdf:type cx:LoadSpectrum;\n      cx:loadSpectrumDescription ?healthType;\n      cx:vehicleOperatingHours ?operatingTime;\n      cx:vehicleCurrentMileage ?mileage;\n      cx:vehicleCurrentStateDateTime ?recordDate;\n      cx:loadSpectrumType ?body_count;\n      cx:hasLoadSpectrumValues [\n      cx:loadSpectrumChannelIndex ?body_classes; \n      cx:loadSpectrumCountingUnit ?countUnit; \n      cx:loadSpectrumCountingMethod ?countMethod; \n      cx:loadSpectrumChannelValues ?channels ].\n\n  OPTIONAL {\n    ?lc cx:loadSpectrumName ?project\n  }\n} \n"
										},
										"url": {
											"raw": "{{provisioningAgent2}}/sparql",
											"host": [
												"{{provisioningAgent2}}"
											],
											"path": [
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Debug Scalable Binding (2nd Endpoint)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT * WHERE {\n\n  VALUES (?van ?aggregate ?healthType) { \n      (\"FNKQHZHFTHMCRX\"^^xsd:string \"Differential Gear\"^^xsd:string \"GearSet\"^^xsd:string) \n      (\"LKTYZWBNDOMPGQ\"^^xsd:string \"Differential Gear\"^^xsd:string \"GearSet\"^^xsd:string) \n      (\"GLKZNIGFNBJIHH\"^^xsd:string \"Differential Gear\"^^xsd:string \"GearOil\"^^xsd:string) \n      (\"FKUBNDMDXQNFHI\"^^xsd:string \"Differential Gear\"^^xsd:string \"GearOil\"^^xsd:string)  \n  }\n  \n  ?vehicle rdf:type cx:Vehicle;\n           cx:vehicleIdentificationNumber ?van;\n           ^cx:isPartOf ?assembly.\n\n  ?assembly rdf:type cx:AssemblyGroup;\n            cx:partName ?aggregate;\n            cx:isProducedBy ?supplier;\n            cx:hasLoadSpectrum ?lc.\n\n  ?lc rdf:type cx:LoadSpectrum;\n      cx:vehicleOperatingHours ?operatingTime;\n      cx:vehicleCurrentMileage ?mileage;\n      cx:vehicleCurrentStateDateTime ?recordDate;\n      cx:loadSpectrumDescription ?healthType;\n      cx:loadSpectrumName ?project;\n      cx:loadSpectrumType ?body_count;\n      cx:hasLoadSpectrumValues ?lsv.\n      \n  ?lsv rdf:type cx:LoadSpectrumValues;\n      cx:loadSpectrumChannelIndex ?body_classes; \n      cx:loadSpectrumCountingUnit ?countUnit; \n      cx:loadSpectrumCountingMethod ?countMethod; \n      cx:loadSpectrumChannelValues ?channels.\n\n} \n"
										},
										"url": {
											"raw": "{{provisioningAgent2}}/sparql",
											"host": [
												"{{provisioningAgent2}}"
											],
											"path": [
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Query Traceability Endpoint/Asset",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?materialNumber ?bpns ?part ?partName ?part2 ?part2Name ?part3 ?part3Name ?part4 ?part4Name ?part5 ?part5Name WHERE {\n\n  VALUES (?materialClass ) { \n      (\"OrganicMaterial_Rubber\"^^xsd:string) \n  }\n  \n  ?material rdf:type cx:EngineeringMaterial;\n     cx:engineeringMaterialNumber ?materialNumber.\n\n  FILTER ( CONTAINS(?materialNumber,?materialClass)).\n\n  ?part rdf:type cx:Part;\n        cx:partName ?partName;\n        cx:isMadeOf ?material;\n        cx:isProducedBy ?bpns.\n\n  ?part cx:isPartOf ?part2.\n  ?part2 cx:partName ?part2Name.\n  \n  OPTIONAL {\n\n   ?part2 cx:isPartOf ?part3.\n   ?part3 cx:partName ?part3Name.\n  \n  }\n\n  OPTIONAL {\n   \n    ?part3 cx:isPartOf ?part4.\n    ?part4 cx:partName ?part4Name.\n  \n  }\n\n  OPTIONAL {\n   \n    ?part4 cx:isPartOf ?part5.\n    ?part5 cx:partName ?part5Name.\n  \n  }\n} \n"
										},
										"url": {
											"raw": "{{provisioningAgent3}}/sparql",
											"host": [
												"{{provisioningAgent3}}"
											],
											"path": [
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Query JSON Output",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "applicaton/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nJSON {\n    \"catenaXId\": ?catenaXId,\n    \"partTypeInformation_nameAtManufacturer\": ?partTypeInformation_nameAtManufacturer,\n    \"partTypeInformation_classification\": \"product\",\n    \"partTypeInformation_manufacturerPartId\": ?partTypeInformation_manufacturerPartId,\n    \"validityPeriod_validFrom\": ?validatityPeriod_validFrom,\n    \"validityPeriod_validTo\": ?validityPeriod_validTo\n} WHERE {\n\n  VALUES (?catenaXId) { \n      (<urn:uuid:0733946c-59c6-41ae-9570-cb43a6e4c79e>) \n  }\n  \n  SERVICE <{{oemProviderAgent3}}/sparql> {\n    ?catenaXId rdf:type cx:Part;\n        cx:partSeries ?partTypeInformation_manufacturerPartId;\n        cx:partName ?partTypeInformation_nameAtManufacturer;\n        cx:partProductionDate ?validatityPeriod_validFrom;\n        cx:partProductionDateTime ?validityPeriod_validTo.\n  }\n} \n"
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										}
									},
									"response": []
								},
								{
									"name": "Query JSON Output",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "applicaton/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX : <:>\n\nCONSTRUCT {\n    [ :catenaXId ?twinId;\n      :partTypeInformation [\n          :nameAtManufacturer ?partName;\n          :classification \"product\";\n          :manufacturerPartId ?partSeries\n      ];\n      :validityPeriod [\n          :validFrom ?from;\n          :validTo ?to\n      ]\n    ].\n} WHERE {\n\n  VALUES (?twin) { \n      (<urn:uuid:0733946c-59c6-41ae-9570-cb43a6e4c79e>) \n  }\n  \n    ?twin rdf:type cx:Part;\n        cx:partSeries ?partSeries;\n        cx:partName ?partName;\n        cx:partProductionDate ?from;\n        cx:partProductionDate ?to.\n} \n"
										},
										"url": {
											"raw": "{{provisioningAgent3}}/sparql",
											"host": [
												"{{provisioningAgent3}}"
											],
											"path": [
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Query JSON Output",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "applicaton/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX : <:>\n\nSELECT * WHERE {\n\n  VALUES (?catenaXId) { \n      (<urn:uuid:0733946c-59c6-41ae-9570-cb43a6e4c79e>) \n  }\n  \n  ?catenaXId rdf:type cx:Part;\n    cx:partSeries ?partTypeInformation_manufacturerPartId;\n    cx:partName ?partTypeInformation_nameAtManufacturere;\n    cx:partProductionDate ?validityPeriod_validFrom;\n    cx:partProductionDate ?validityPeriod_validTo.\n\n  BIND(\"product\"^^xsd:string AS ?partTypeInformation_classification)\n} \n"
										},
										"url": {
											"raw": "{{provisioningAgent3}}/sparql",
											"host": [
												"{{provisioningAgent3}}"
											],
											"path": [
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Query Quality Endpoint/Asset",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?part WHERE { ?part <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#Part> . } \n"
										},
										"url": {
											"raw": "{{provisioningAgent4}}/sparql",
											"host": [
												"{{provisioningAgent4}}"
											],
											"path": [
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Query Quality Endpoint/Asset Copy",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{provisioningAgent4}}/sparql?query=SELECT%20%3Fpart%20WHERE%20%7B%20%3Fpart%20%3Chttp%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23type%3E%20%3Chttps%3A%2F%2Fraw.githubusercontent.com%2Fcatenax-ng%2Fproduct-knowledge%2Fmain%2Fontology%2Fcx_ontology.ttl%23Part%3E%20.%20%7D%20%0A",
											"host": [
												"{{provisioningAgent4}}"
											],
											"path": [
												"sparql"
											],
											"query": [
												{
													"key": "query",
													"value": "SELECT%20%3Fpart%20WHERE%20%7B%20%3Fpart%20%3Chttp%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23type%3E%20%3Chttps%3A%2F%2Fraw.githubusercontent.com%2Fcatenax-ng%2Fproduct-knowledge%2Fmain%2Fontology%2Fcx_ontology.ttl%23Part%3E%20.%20%7D%20%0A"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "A Collection of API Calls Against the Data Provisioning Agents Directly Which Sits upon some Data Source.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "EDC (Intern)",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "Create Data Graph Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"asset\": {\n        \"properties\": {\n            \"asset:prop:id\": \"urn:cx:Graph:oem:Diagnosis2022\",\n            \"asset:prop:contract\": \"<urn:cx:Graph:oem>\",\n            \"asset:prop:name\": \"Diagnostic Trouble Code Catalogue Version 2022\",\n            \"asset:prop:description\": \"A sample graph asset/offering referring to a specific diagnosis resource.\",\n            \"asset:prop:version\": \"0.7.4-SNAPSHOT\",\n            \"asset:prop:contenttype\": \"application/json, application/xml\",\n            \"rdf:type\": \"<{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>\",\n            \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/diagnosis_ontology.ttl>\",\n            \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n            \"cx:shape\": \"@prefix : <urn:cx:Graph:oem:Diagnosis2022> .\\n@prefix cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#> .\\n@prefix cx-diag: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/diagnosis_ontology.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\n:OemDTC rdf:type sh:NodeShape ;\\n  sh:targetClass cx:DTC ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003COJN> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx:Version ;\\n        sh:hasValue 0^^xsd:long ;\\n    ] ;\\n  sh:property [\\n        sh:path cx:affects ;\\n        sh:class :OemDiagnosedParts ;\\n    ] ;\\n\\n:OemDiagnosedParts rdf:type sh:NodeShape ;\\n  sh:targetClass cx:DiagnosedPart ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003COJN> ;\\n    ] ;\\n\",\n            \"cx:isFederated\": true\n        }\n    },\n    \"dataAddress\": {\n        \"properties\": {\n            \"asset:prop:id\": \"urn:cx:Graph:oem:Diagnosis2022\",\n            \"baseUrl\": \"{{oemProviderAgent}}/sparql\",\n            \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n            \"proxyPath\": \"false\",\n            \"proxyMethod\": \"true\",\n            \"proxyQueryParams\": \"true\",\n            \"proxyBody\": \"true\",\n            \"authKey\": \"{{oemBackendAuthKey}}\",\n            \"authCode\": \"{{oemBackendAuthCode}}\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/data/assets",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"data",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create 2nd Graph Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:oem:BehaviourTwin\",\n      \"asset:prop:contract\": \"<urn:cx:Graph:oem>\",\n      \"asset:prop:name\": \"OEM portion of the Behaviour Twin RUL/HI Testdataset.\",\n      \"asset:prop:description\": \"A graph asset/offering mounting Carena-X Testdata for Behaviour Twin.\",\n      \"asset:prop:version\": \"CX_RuL_Testdata_v1.0.0\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"rdf:type\":\"<{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>\",\n      \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/load_spectrum_ontology.ttl>\",\n      \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n      \"cx:shape\": \"@prefix : <urn:cx:Graph:oem:BehaviourTwin> .\\n@prefix cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\nOemLoadSpectrum rdf:type sh:NodeShape ;\\n  sh:targetClass cx:LoadSpectrum ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <bpn:legal:BPNL00000003AYRE> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx:Version ;\\n        sh:hasValue 0^^xsd:long ;\\n    ] ;\\n  sh:property [\\n        sh:path cx: ;\\n        sh:class SupplierParts ;\\n    ] ;\\n\\nSupplierParts rdf:type sh:NodeShape ;\\n  sh:targetClass cx:VehicleComponent ;\\n  sh:property [\\n        sh:path cx:isProducedBy ;\\n        sh:hasValue <bpn:legal:BPNL00000003B2OM> ;\\n    ] ;\\n\",\n      \"cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:oem:BehaviourTwin\",\n      \"baseUrl\": \"http://oem-provider-agent:8081/sparql\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\",\n      \"authKey\": \"{{oemBackendAuthKey}}\",\n      \"authCode\": \"{{oemBackendAuthCode}}\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/data/assets",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"data",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create 3rd Graph Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:oem:TraceabilityAsPlanned\",\n      \"asset:prop:contract\": \"<urn:cx:Graph:oem>\",\n      \"asset:prop:name\": \"OEM portion of the Traceability As-Planned Testdataset.\",\n      \"asset:prop:description\": \"A graph asset/offering mounting Carena-X Testdata for Traceability.\",\n      \"asset:prop:version\": \"CX_Testdata_v1.4.1-AsPlanned\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"rdf:type\":\"<{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>\",\n      \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/part_ontology.ttl>\",\n      \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n      \"cx:shape\": \"@prefix : <urn:cx:Graph:oem:TraceabilityAsPlanned> .\\n@prefix cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\nOemAssemblyGroup rdf:type sh:NodeShape ;\\n  sh:targetClass cx:AssemblyGroup ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <bpn:legal:BPNL00000003AYRE> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx:Version ;\\n        sh:hasValue 0^^xsd:long ;\\n    ] ;\\n  sh:property [\\n        sh:path cx: ;\\n        sh:class SupplierParts ;\\n    ] ;\\n\\nSupplierParts rdf:type sh:NodeShape ;\\n  sh:targetClass cx:Part ;\\n  sh:property [\\n        sh:path cx:isProducedBy ;\\n        sh:hasValue <bpn:legal:BPNL00000003B2OM> ;\\n    ] ;\\n\",\n      \"cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:oem:TraceabilityAsPlanned\",\n      \"baseUrl\": \"http://oem-provider-agent:8082/sparql\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\",\n      \"authKey\": \"{{oemBackendAuthKey}}\",\n      \"authCode\": \"{{oemBackendAuthCode}}\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/data/assets",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"data",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create 4th Graph Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:oem:Quality\",\n      \"asset:prop:contract\": \"<urn:cx:Graph:oem>\",\n      \"asset:prop:name\": \"Quality Data.\",\n      \"asset:prop:description\": \"A graph asset/offering mounting Quality data.\",\n      \"asset:prop:version\": \"v0.7.2\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"rdf:type\":\"<{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>\",\n      \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/error_ontology.ttl>\",\n      \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n      \"cx:shape\": \"@prefix : <urn:cx:Graph:oem:Quality> .\",\n      \"cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:oem:Quality\",\n      \"baseUrl\": \"http://oem-provider-agent:8083/sparql\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\",\n      \"authKey\": \"{{oemBackendAuthKey}}\",\n      \"authCode\": \"{{oemBackendAuthCode}}\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/data/assets",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"data",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create Conforming Graph",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:oem:Conforming\",\n      \"asset:prop:contract\": \"<urn:cx:Graph:oem>\",\n      \"asset:prop:name\": \"Conforming Asset.\",\n      \"asset:prop:description\": \"A graph asset/offering hosting a conforming agent.\",\n      \"asset:prop:version\": \"v0.8.4\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"rdf:type\":\"<{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>\",\n      \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/cx_ontology.ttl>\",\n      \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n      \"cx:shape\": \"@prefix : <urn:cx:Graph:oem:Conforming> .\",\n      \"cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:oem:Conforming\",\n      \"baseUrl\": \"http://conforming-agent:8080/match\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\",\n      \"authKey\": \"{{oemBackendAuthKey}}\",\n      \"authCode\": \"{{oemBackendAuthCode}}\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/data/assets",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"data",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create Graph Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"urn:cx:Policy:oem\",\n  \"policy\": {\n    \"permissions\": [\n        {\n            \"action\": {\n                \"type\": \"USE\"\n            },\n            \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/data/policydefinitions",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"data",
														"policydefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph policy."
											},
											"response": []
										},
										{
											"name": "Create Graph Contract Definition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\":\"urn_cx_Graph_oem\",\n  \"accessPolicyId\": \"urn:cx:Policy:oem\",\n  \"contractPolicyId\": \"urn:cx:Policy:oem\",\n  \"criteria\": [ {\n      \"operandLeft\": \"asset:prop:contract\",\n      \"operator\":\"=\",\n      \"operandRight\":\"<urn:cx:Graph:oem>\"\n  }]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/data/contractdefinitions",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"data",
														"contractdefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a contract."
											},
											"response": []
										},
										{
											"name": "Create Skill Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:oem:HealthIndication\",\n      \"asset:prop:contract\": \"<urn:cx:Skill:oem>\",\n      \"asset:prop:name\": \"Health Indication Skill\",\n      \"asset:prop:description\": \"Obtains Health-Indication Score for Particular Vehicles Based on Telematics Data\",\n      \"asset:prop:version\": \"0.7.4-SNAPSHOT\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n      \"rdf:type\":\"<{{cxOntologyRoot}}/cx_ontology.ttl#SkillAsset>\",\n      \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/common_ontology.ttl>,<{{cxOntologyRoot}}/diagnosis_ontology.ttl>,<{{cxOntologyRoot}}/part_ontology.ttl>\",\n      \"cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:oem:HealthIndication\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SKILL#SPARQL\",\n      \"query\": \"PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\\nPREFIX cx-health: <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#>\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \\n\\n# Sample for a Federated Skill (No Matchmaking) Which\\n#  - Jumps right into the OEM with a set of VANs and aggregates\\n#  - Feeds this data into the respective tiera connector/agent to perform a health prognosis \\n\\nSELECT ?van ?aggregate ?assembly ?healthType ?recordDate ?mileage ?operatingTime ?health WHERE {\\n\\n    # Actual input parameters, when used as a predefined skill, \\n    VALUES (?van ?aggregate ?healthType ?adaptionValues) { \\n      (\\\"@van\\\"^^xsd:string \\\"@aggregate\\\"^^xsd:string \\\"@healthType\\\"^^xsd:string \\\"@adaptionValues\\\"^^json:Object) \\n    }\\n    \\n    # Now we are jumping into the OEM\\n    SERVICE <{{oemProviderAgent2}}/sparql> { \\n\\n        ?vehicle rdf:type cx:Vehicle;\\n           cx:vehicleIdentificationNumber ?van.\\n\\n        ?assembly rdf:type cx:AssemblyGroup;\\n            cx:partName ?aggregate;\\n            cx:isPartOf ?vehicle;\\n            cx:isProducedBy ?supplier;\\n            cx:hasLoadSpectrum [ \\n                 cx:vehicleOperatingHours ?operatingTime;\\n                 cx:vehicleCurrentMileage ?mileage;\\n                 cx:vehicleCurrentStateDateTime ?recordDate;\\n                 cx:loadSpectrumDescription ?healthType;\\n                 cx:loadSpectrumType ?channels;\\n                 cx:hasLoadSpectrumValues [ \\n                    cx:loadSpectrumCountingUnit ?countUnit; \\n                    cx:loadSpectrumCountingMethod ?countMethod; \\n                    cx:loadSpectrumChannelIndex ?classes; \\n                    cx:loadSpectrumChannelValues ?counts\\n                 ]\\n            ].\\n    }\\n\\n    SERVICE <{{tierARemotingAgent}}/repositories/health> { \\n      ?invocation rdf:type cx-health:HealthIndication;\\n                  cx-health:requestComponentId ?assembly;\\n                  cx-health:classifiedLoadCollectiveComponentDescription ?healthType;\\n                  cx-health:classifiedLoadCollectiveCountingValue ?countValue;\\n                  cx-health:classifiedLoadCollectiveCountingUnit ?countUnit;\\n                  cx-health:classifiedLoadCollectiveCountingMethod ?countMethod;\\n                  cx-health:classifiedLoadCollectiveChannels ?channels;\\n                  cx-health:classifiedLoadCollectiveClasses ?classes;\\n                  cx-health:classifiedLoadCollectiveCounts ?counts;\\n                  cx-health:adaptionValueVersion \\\"0.6.4\\\"^^xsd:string; \\n                  cx-health:adaptionValueTimestamp ?recordDate;\\n                  cx-health:adaptionValueMileage ?mileage; \\n                  cx-health:adaptionValueOperatingTime ?operatingTime;\\n                  cx-health:adaptionValueList ?adaptionValues;\\n                  cx-health:indicatorVersion ?indicatorVersion;\\n                  cx-health:responseComponentId ?indicatorComponentId;\\n                  cx-health:healthIndicatorValues ?health.    \\n    }\\n    \\n}\\n\\n\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"false\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"false\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/data/assets",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"data",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill asset."
											},
											"response": []
										},
										{
											"name": "Create Skill Contract Definition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\":\"urn_cx_Skill_oem\",\n  \"accessPolicyId\": \"urn:cx:Policy:oem\",\n  \"contractPolicyId\": \"urn:cx:Policy:oem\",\n  \"criteria\": [ {\n      \"operandLeft\": \"asset:prop:contract\",\n      \"operator\":\"=\",\n      \"operandRight\":\"<urn:cx:Skill:oem>\"\n  }]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{oemEdcControl}}/data/contractdefinitions",
													"host": [
														"{{oemEdcControl}}"
													],
													"path": [
														"data",
														"contractdefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill contract."
											},
											"response": []
										},
										{
											"name": "Register Health Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX cx-health: <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \n\n# Sample for a Federated Skill (No Matchmaking) Which\n#  - Jumps right into the OEM with a set of VANs and aggregates\n#  - Feeds this data into the respective tiera connector/agent to perform a health prognosis \n\nSELECT ?van ?aggregate ?supplier ?assembly ?healthType ?recordDate ?mileage ?operatingTime ?health ?supplierEDC ?healthIndicatorAsset WHERE {\n\n    # Actual input parameters, when used as a predefined skill, \n    VALUES (?van ?aggregate ?healthType ?adaptionValues) { \n      (\"@van\"^^xsd:string \"@aggregate\"^^xsd:string \"@healthType\"^^xsd:string \"@adaptionValues\"^^json:Object) \n    }\n    \n    # Now we are jumping into the OEM\n    SERVICE <{{oemProviderAgent2}}/sparql> { \n\n        ?vehicle rdf:type cx:Vehicle;\n           cx:vehicleIdentificationNumber ?van.\n\n        ?assembly rdf:type cx:AssemblyGroup;\n            cx:partName ?aggregate;\n            cx:isPartOf ?vehicle;\n            cx:isProducedBy ?supplier;\n            cx:hasLoadSpectrum [ \n                 cx:vehicleOperatingHours ?operatingTime;\n                 cx:vehicleCurrentMileage ?mileage;\n                 cx:vehicleCurrentStateDateTime ?recordDate;\n                 cx:loadSpectrumDescription ?healthType;\n                 cx:loadSpectrumType ?channels;\n                 cx:hasLoadSpectrumValues [ \n                    cx:loadSpectrumCountingUnit ?countUnit; \n                    cx:loadSpectrumCountingMethod ?countMethod; \n                    cx:loadSpectrumChannelIndex ?classes; \n                    cx:loadSpectrumChannelValues ?counts\n                 ]\n            ].\n    }\n\n    ?supplier <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#hasConnector> ?supplierEDC.\n    ?supplierEDC <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#offersAsset> ?healthIndicatorAsset.\n    ?healthIndicatorAsset a cx:GraphAsset;\n       rdfs:isDefinedBy <{{cxOntologyRoot}}/load_spectum_ontology.ttl>.\n\n    #SERVICE <{{tierARemotingAgent}}/repositories/health> {\n    SERVICE ?supplierEDC {\n        GRAPH ?healthIndicatorAsset { \n            ?invocation rdf:type cx-health:HealthIndication;\n                  cx-health:requestComponentId ?assembly;\n                  cx-health:classifiedLoadCollectiveComponentDescription ?healthType;\n                  cx-health:classifiedLoadCollectiveCountingValue ?countValue;\n                  cx-health:classifiedLoadCollectiveCountingUnit ?countUnit;\n                  cx-health:classifiedLoadCollectiveCountingMethod ?countMethod;\n                  cx-health:classifiedLoadCollectiveChannels ?channels;\n                  cx-health:classifiedLoadCollectiveClasses ?classes;\n                  cx-health:classifiedLoadCollectiveCounts ?counts;\n                  cx-health:adaptionValueVersion \"0.6.4\"^^xsd:string; \n                  cx-health:adaptionValueTimestamp ?recordDate;\n                  cx-health:adaptionValueMileage ?mileage; \n                  cx-health:adaptionValueOperatingTime ?operatingTime;\n                  cx-health:adaptionValueList ?adaptionValues;\n                  cx-health:indicatorVersion ?indicatorVersion;\n                  cx-health:responseComponentId ?indicatorComponentId;\n                  cx-health:healthIndicatorValues ?health.    \n        }\n    }\n    \n}\n\n",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{oemAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:oem:Health",
													"host": [
														"{{oemAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:oem:Health"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Modular Health Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \n\n# Sample for a Federated Modular Skill (No Matchmaking) Which\n#  - Jumps right into the OEM with a set of VINs\n#  - Calls subskills to perform a health prognosis for the main aggregates \n\nSELECT ?van ?aggregate ?supplier ?assembly ?healthType ?health ?supplierEDC WHERE {\n\n    # Actual input parameters, when used as a predefined skill, \n    VALUES (?vin ) { \n      (\"@vin\"^^xsd:string) \n    }\n\n    # Lookup the manufacturer and its main vehicle information asset\n    ?vin cx:worldManufacturerId ?oem.\n    ?oem cx:hasConnector ?oemEDC.\n    ?oemEDC cx:offersAsset ?vehicleAsset.\n    ?vehicleAsset rdf:type cx:GraphAsset;\n       rdfs:isDefinedBy <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/vehicle_information_ontology.ttl>.\n\n    # Now we are jumping into the OEM\n    SERVICE ?oemEDC { \n\n        GRAPH ?vehicleAsset {\n            ?van rdf:type cx:Vehicle;\n                cx:vehicleIdentificationNumber ?vin.\n\n            ?assembly rdf:type cx:AssemblyGroup;\n                cx:partName ?aggregate;\n                cx:isPartOf ?van;\n                cx:isProducedBy ?supplier.\n        }\n\n        ?telematicsAsset rdf:type cx:GraphAsset;\n            rdfs:isDefinedBy <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/load_spectrum_ontology.ttl>.\n\n        ?supplier cx:hasConnector ?supplierEDC.\n        ?supplierEDC cx:offersAsset ?prognosisSkill.\n        ?prognosisSkill a cx:SkillAsset;\n            rdfs:isDefinedBy <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/prognosis_ontology.ttl>.\n\n        SERVICE <{?supplierEDC}#{?prognosisSkill}?assembly={?assembly}&asset={telematicsAsset}&oem={?oemEDC}> {\n        }\n    }\n    \n}\n\n",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{oemAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:oem:Health",
													"host": [
														"{{oemAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:oem:Health"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Health Skill Module",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX cx-health: <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \n\n# Sample for a Modular Subskill\n#  - Jumps back into the given OEM to obtain specific data\n#  - Feeds this data into the health prognosis asset \n\nSELECT ?healthType ?health WHERE {\n\n    # Actual input parameters, when used as a predefined skill, \n    VALUES (?assembly ?telematicsAsset ?oemEDC ?healthType) { \n      (<@assembly> <@asset> <@oem> \"Gearbox\"^^xsd:string) \n    }\n    \n    # Now we are jumping into the OEM\n    SERVICE ?oemEDC { \n        GRAPH ?telematicsAsset {\n        ?assembly rdf:type cx:AssemblyGroup;\n            cx:hasLoadSpectrum [ \n                 cx:vehicleOperatingHours ?operatingTime;\n                 cx:vehicleCurrentMileage ?mileage;\n                 cx:vehicleCurrentStateDateTime ?recordDate;\n                 cx:loadSpectrumDescription ?healthType;\n                 cx:loadSpectrumType ?channels;\n                 cx:hasLoadSpectrumValues [ \n                    cx:loadSpectrumCountingUnit ?countUnit; \n                    cx:loadSpectrumCountingMethod ?countMethod; \n                    cx:loadSpectrumChannelIndex ?classes; \n                    cx:loadSpectrumChannelValues ?counts\n                 ]\n            ].\n    }\n\n    GRAPH <{{tieraRemotingAgent2}}>/sparql> { \n            ?invocation rdf:type cx-health:HealthIndication;\n                  cx-health:requestComponentId ?assembly;\n                  cx-health:classifiedLoadCollectiveComponentDescription ?healthType;\n                  cx-health:classifiedLoadCollectiveCountingValue ?countValue;\n                  cx-health:classifiedLoadCollectiveCountingUnit ?countUnit;\n                  cx-health:classifiedLoadCollectiveCountingMethod ?countMethod;\n                  cx-health:classifiedLoadCollectiveChannels ?channels;\n                  cx-health:classifiedLoadCollectiveClasses ?classes;\n                  cx-health:classifiedLoadCollectiveCounts ?counts;\n                  cx-health:adaptionValueVersion \"0.6.4\"^^xsd:string; \n                  cx-health:adaptionValueTimestamp ?recordDate;\n                  cx-health:adaptionValueMileage ?mileage; \n                  cx-health:adaptionValueOperatingTime ?operatingTime;\n                  cx-health:adaptionValueList ?adaptionValues;\n                  cx-health:indicatorVersion ?indicatorVersion;\n                  cx-health:responseComponentId ?indicatorComponentId;\n                  cx-health:healthIndicatorValues ?health.    \n        }\n    }\n    \n}\n\n",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{tieraAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:supplier:Health",
													"host": [
														"{{tieraAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:supplier:Health"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										}
									]
								},
								{
									"name": "Check Probe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check was successful\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json()).to.have.property(\"isSystemHealthy\",true);",
													"    pm.expect(pm.response.json()).to.have.property(\"componentResults\");",
													"    pm.expect(pm.response.json().componentResults).to.have.length.greaterThan(0);",
													"    pm.response.json().componentResults.map( function(component) {",
													"        pm.expect(component).to.have.property(\"isHealthy\",true);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcApi}}/api/check/:stage",
											"host": [
												"{{oemEdcApi}}"
											],
											"path": [
												"api",
												"check",
												":stage"
											],
											"variable": [
												{
													"key": "stage",
													"value": "startup",
													"description": "You may choose startup, readiness or liveness"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Graph Contract Definition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/data/contractdefinitions/:id",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"contractdefinitions",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "oemOffer"
												}
											]
										},
										"description": "Calls the datamanagement API in order to create a contract."
									},
									"response": []
								},
								{
									"name": "List Assets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(asset) {",
													"        pm.expect(asset).to.have.property(\"properties\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:id\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:name\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:contenttype\");",
													"        var contenttypes=asset.properties[\"asset:prop:contenttype\"].split(\",\").map(function(type) { return type.trim();});",
													"        contenttypes.map(function(contenttype) {",
													"            var contenttypespec=contenttype.split(\";\");",
													"            pm.expect(contenttypespec[0]).oneOf([\"application/json\",\"application/xml\",\"application/cx-skill\"]);",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/assets",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"assets"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the assets."
									},
									"response": []
								},
								{
									"name": "List Policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(policy) {",
													"        pm.expect(policy).to.have.property(\"uid\");",
													"        pm.expect(policy).to.have.property(\"permissions\");",
													"        pm.expect(policy.permissions).to.have.length.gte(0);",
													"        policy.permissions.map(function(permission) {",
													"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
													"            pm.expect(permission).to.have.property(\"target\");",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/policydefinitions",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"policydefinitions"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the policies."
									},
									"response": []
								},
								{
									"name": "List Contract Definitions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(policy) {",
													"        pm.expect(policy).to.have.property(\"uid\");",
													"        pm.expect(policy).to.have.property(\"permissions\");",
													"        pm.expect(policy.permissions).to.have.length.gte(0);",
													"        policy.permissions.map(function(permission) {",
													"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
													"            pm.expect(permission).to.have.property(\"target\");",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/contractdefinitions",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"contractdefinitions"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the policies."
									},
									"response": []
								},
								{
									"name": "List Contract Agreements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(policy) {",
													"        pm.expect(policy).to.have.property(\"uid\");",
													"        pm.expect(policy).to.have.property(\"permissions\");",
													"        pm.expect(policy.permissions).to.have.length.gte(0);",
													"        policy.permissions.map(function(permission) {",
													"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
													"            pm.expect(permission).to.have.property(\"target\");",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/contractagreements",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"contractagreements"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the policies."
									},
									"response": []
								},
								{
									"name": "List Contract Negotiations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(policy) {",
													"        pm.expect(policy).to.have.property(\"uid\");",
													"        pm.expect(policy).to.have.property(\"permissions\");",
													"        pm.expect(policy.permissions).to.have.length.gte(0);",
													"        policy.permissions.map(function(permission) {",
													"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
													"            pm.expect(permission).to.have.property(\"target\");",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/contractnegotiations",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"contractnegotiations"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the policies."
									},
									"response": []
								},
								{
									"name": "Delete Contract Negotiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/data/contractnegotiations/:id/:type",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"contractnegotiations",
												":id",
												":type"
											],
											"variable": [
												{
													"key": "id",
													"value": "69091dba-f7cd-4a84-92bd-68967d8f4042"
												},
												{
													"key": "type",
													"value": "cancel"
												}
											]
										},
										"description": "Calls the datamanagement API in order to create a contract."
									},
									"response": []
								},
								{
									"name": "Show Catalogue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Catalogue listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"id\");",
													"    pm.expect(pm.response.json()).to.have.property(\"contractOffers\");",
													"    pm.expect(pm.response.json().contractOffers).to.have.length.gte(0);",
													"    pm.response.json().contractOffers.map(function(contractOffer) {",
													"        pm.expect(contractOffer).to.have.property(\"id\");",
													"        pm.expect(contractOffer).to.have.property(\"policy\");",
													"        pm.expect(contractOffer).to.have.property(\"asset\");",
													"        pm.expect(contractOffer.asset).to.have.property(\"properties\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:id\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:name\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:contenttype\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/catalog?providerUrl={{oemEdcIds}}/api/v1/ids/data",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"catalog"
											],
											"query": [
												{
													"key": "providerUrl",
													"value": "{{oemEdcIds}}/api/v1/ids/data"
												}
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
									},
									"response": []
								},
								{
									"name": "Perform an OEM-Local SparQL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
													"description": "A local query"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Perform a Self-SparQL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} LIMIT 100&asset={{oemEdcIds}}%23urn:cx:Graph:oem:Diagnosis2022",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} LIMIT 100"
												},
												{
													"key": "asset",
													"value": "http://oem-control-plane:8282%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcIds}}%23urn:cx:Graph:oem:Diagnosis2022"
												},
												{
													"key": "asset",
													"value": "{{tieraEdcIds}}%23urn:cx:Graph:tierA:HealthIndicatorGearbox",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Perform a Self-SparQL Copy",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} LIMIT 100"
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset={{oemEdcControl}}%23urn:cx:Graph:oem:Diagnosis2022",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "http://oem-control-plane:8282%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcControl}}%23urn:cx:Graph:oem:Diagnosis2022"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Post Self-SparQL",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#>\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\n\n##############################################################################################\n#              Catena-X Knowledge Agents Sample Federated Search Skill                       #\n#                     Implements Trouble-Code Search based on VINs                           #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - DTC Analysis/Resolution (including the READING of Version and Description)             #\n##############################################################################################\n\nSELECT ?problemArea ?vin ?codeNumber ?description ?version WHERE {\n\n    ####\n    # Three parameters to the custom search\n    ####\n    VALUES (?vin ?problemArea ?minVersion) {(\"WBAAL31029PZ00001\"^^xsd:string \"Getriebe\"^^xsd:string \"0\"^^xsd:long)}\n\n    ####\n    # Lookup the responsible OEM(s)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n    #?oemConnector cx:offersAsset ?diagnoseAsset.\n    #?diagnoseAsset rdf:type <{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>;\n    #               rdfs:isDefinedBy <{{cxOntologyRoot}}/diagnosis_ontology.ttl>.\n\n    ####\n    # Delegate to the revelant connector(s) and asset(s)\n    ####\n    SERVICE ?oemConnector {\n        GRAPH <urn:cx:Graph:oem:Diagnosis2022> {\n\n            ?Dtc rdf:type cx-diag:DTC;\n                 cx-diag:Code ?codeNumber;\n                 cx-diag:Description ?description;\n                 cx-diag:Version ?version.\n\n            FILTER ( CONTAINS(?description, ?problemArea) && ?version >= ?minVersion)\n       \n        } # Graph Asset\n    } # Remote Connector\n} # Search",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "Execute Health Indicator Skill Post Binding",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": {\n        \"vars\": [\n            \"van\",\n            \"aggregate\",\n            \"healthType\",\n            \"adaptionValues\"\n        ]\n    },\n    \"results\": {\n        \"bindings\": [\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FNLQNRVCOFLHAQ\"\n                },\n                \"aggregate\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Differential Gear\"\n                },\n               \"healthType\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Clutch\"\n                },\n                \"adaptionValues\": {\n                    \"type\": \"json:Object\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FGPTXINYZAVJYK\"\n                },\n                \"aggregate\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Differential Gear\"\n                },\n               \"healthType\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Clutch\"\n                },\n                \"adaptionValues\": {\n                    \"type\": \"json:Object\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"DVAJDTLJMKKZGY\"\n                },\n                \"aggregate\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Differential Gear\"\n                },\n               \"healthType\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Clutch\"\n                },\n                \"adaptionValues\": {\n                    \"type\": \"json:Object\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FKUBNDMDXQNFHI\"\n                },\n                \"aggregate\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Differential Gear\"\n                },\n               \"healthType\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Clutch\"\n                },\n                \"adaptionValues\": {\n                    \"type\": \"json:Object\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            },\n           {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"HHXDGSMSUTWFUO\"\n                },\n                \"aggregate\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Differential Gear\"\n                },\n               \"healthType\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Clutch\"\n                },\n                \"adaptionValues\": {\n                    \"type\": \"json:Object\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"FVARQFZDICATNV\"\n                },\n                \"aggregate\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Differential Gear\"\n                },\n               \"healthType\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Clutch\"\n                },\n                \"adaptionValues\": {\n                    \"type\": \"json:Object\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"VKKTXVZTRKRNSB\"\n                },\n                \"aggregate\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Differential Gear\"\n                },\n               \"healthType\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Clutch\"\n                },\n                \"adaptionValues\": {\n                    \"type\": \"json:Object\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            },\n            {\n                \"van\": {\n                    \"type\": \"literal\",\n                    \"value\": \"HGWQDJCIGBSKXH\"\n                },\n                \"aggregate\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Differential Gear\"\n                },\n               \"healthType\": {\n                    \"type\": \"literal\",\n                    \"value\": \"Clutch\"\n                },\n                \"adaptionValues\": {\n                    \"type\": \"json:Object\",\n                    \"value\": \"[91.1931437876285,82.87065725646937,0.1323891300303766,0.6915029359657375]\"\n                }\n            }   \n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset=urn:cx:Skill:oem:Health",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "shit",
													"value": "false",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "urn:cx:Skill:oem:Health"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Check GraphDB/FedX requirements",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:7200/repositories/INTERN/rest/monitor/query",
											"host": [
												"localhost"
											],
											"port": "7200",
											"path": [
												"repositories",
												"INTERN",
												"rest",
												"monitor",
												"query"
											]
										}
									},
									"response": []
								}
							],
							"description": "A Collection of Calls against the EDC control and data planes sitting on top of a data provisioner.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "AAS Bridge",
							"item": [
								{
									"name": "List Shells",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{aasBridge}}/shells",
											"host": [
												"{{aasBridge}}"
											],
											"path": [
												"shells"
											]
										}
									},
									"response": []
								},
								{
									"name": "List Submodels",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{aasBridge}}/submodels",
											"host": [
												"{{aasBridge}}"
											],
											"path": [
												"submodels"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Submodel",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{aasBridge}}/submodels/:submodelIdentifier/submodel?level=deep&content=normal",
											"host": [
												"{{aasBridge}}"
											],
											"path": [
												"submodels",
												":submodelIdentifier",
												"submodel"
											],
											"query": [
												{
													"key": "level",
													"value": "deep"
												},
												{
													"key": "content",
													"value": "normal"
												}
											],
											"variable": [
												{
													"key": "submodelIdentifier",
													"value": "M2NiMmE3ZmItZDE2ZS00YTRlLTliZTUtZWE1MzllODk5MTA4"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "A Collection of API Calls Against the Data Provisioning Components of the Dataspace.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{oemPassword}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{oemUser}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "TierA (Function Remoting Agent)",
					"item": [
						{
							"name": "Remoting Agent (Intern)",
							"item": [
								{
									"name": "Test the Public Service",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.agify.io?name=Christoph",
											"protocol": "https",
											"host": [
												"api",
												"agify",
												"io"
											],
											"query": [
												{
													"key": "name",
													"value": "Schorsch",
													"description": "Prognosis Input, here a primitve string",
													"disabled": true
												},
												{
													"key": "name",
													"value": "Christoph"
												}
											]
										},
										"description": "An example of a public prognosis service."
									},
									"response": []
								},
								{
									"name": "Check the Backend Services",
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{tierABackend}}/docs",
											"host": [
												"{{tierABackend}}"
											],
											"path": [
												"docs"
											]
										},
										"description": "Invocation of the actual Lifetime Prognosis Service"
									},
									"response": []
								},
								{
									"name": "Test the RUL Service",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "load_collective_file",
													"type": "file",
													"src": "/Users/A29078924/Downloads/Fzg1_LCollective.json"
												}
											]
										},
										"url": {
											"raw": "{{tierABackend}}/api/rul",
											"host": [
												"{{tierABackend}}"
											],
											"path": [
												"api",
												"rul"
											]
										},
										"description": "Invocation of the actual Lifetime Prognosis Service"
									},
									"response": []
								},
								{
									"name": "Test the HI Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Provisioning Agent Was Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"requestRefId\");",
													"    pm.expect(pm.response.json()).to.have.property(\"healthIndicatorOutputs\");",
													"    pm.expect(pm.response.json().healthIndicatorOutputs).to.have.length(2);",
													"    pm.response.json().healthIndicatorOutputs.map(function(output) {",
													"        pm.expect(output).to.have.property(\"version\");",
													"        pm.expect(output).to.have.property(\"componentId\");",
													"        pm.expect(output).to.have.property(\"healthIndicatorValues\");",
													"        pm.expect(output.healthIndicatorValues).to.have.length.gte(1);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "hi_input",
													"type": "file",
													"src": "/Users/A29078924/Projects/catenax/product-knowledge/dataspace/mock/prognosis/tests/data/sample-hi-input.json"
												}
											]
										},
										"url": {
											"raw": "{{tierABackend}}/api/hi",
											"host": [
												"{{tierABackend}}"
											],
											"path": [
												"api",
												"hi"
											]
										},
										"description": "Invocation of the actual Lifetime Prognosis Service"
									},
									"response": []
								},
								{
									"name": "Check the Remoting Agent",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{remotingAgent}}/protocol",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"protocol"
											]
										},
										"description": "This endpoint should return the number of supported protocols and can be used as a healthcheck."
									},
									"response": []
								},
								{
									"name": "Query Public/Simple Binding",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX prognosis: <https://github.com/catenax-ng/product-knowledge/ontology/prognosis.ttl#>\n\nSELECT ?invocation ?prediction ?support\nWHERE { \n  ?invocation a prognosis:Prognosis;         \n              prognosis:name \"Schorsch\"^^xsd:string; \n              prognosis:prediction ?prediction; \n              prognosis:support ?support; \n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/prognosis",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"prognosis"
											]
										},
										"description": "A sample SparQL query against a simple invocation with only primitive inputs and outputs."
									},
									"response": []
								},
								{
									"name": "Query Backend/Complex Binding",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-lifetime: <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\n\nSELECT ?invocation ?distance ?time\nWHERE { \n  ?invocation a cx-lifetime:LifetimePrognosis;\n              cx-lifetime:loadCollectiveFile \"{  \\\"Type\\\": \\\"ZF_load_collective\\\", \\\"Version\\\": \\\"1.7\\\"  }\"^^json:Object; \n              cx-lifetime:loadCollectiveHeader \"{  \\\"CountingMethod\\\": \\\"ZF_TimeAtLevel\\\",    \\\"CountingUnit\\\": \\\"s\\\",    \\\"Channels\\\": [      {        \\\"Name\\\": \\\"Temp_Oil\\\",        \\\"Type\\\": \\\"Load\\\",        \\\"Unit\\\": \\\"degC\\\",        \\\"LowerLimit\\\": -40,        \\\"UpperLimit\\\": 220,        \\\"NumberOfBins\\\": 52      }  ]  }\"^^json:Object; \n              cx-lifetime:loadCollectiveBody \"{     \\\"Temp_Oil-class\\\": [1, 3, 4, 5, 7, 8, 12, 13, 17, 18, 20, 22, 23, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 47, 48, 49, 50, 51],  \\\"Counts\\\": [7.234E+01, 2.345E+02, 6.654E+02, 5.983E+01, 4.321E+02, 3.876E+02, 5.567E+01, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+02, 6.098E+02, 7.432E+02, 8.873E+02, 4.738E+01, 6.927E+01, 1.234E+02, 2.345E+02, 3.654E+02, 2.983E+01, 4.321E+01, 3.876E+02, 5.567E+02, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+01, 6.098E+01, 3.432E+02, 1.873E+02, 4.738E+02, 6.927E+02] }\"^^json:Object; \n              cx-lifetime:loadCollectiveComponent \"GearOil\"^^xsd:string; \n              cx-lifetime:loadCollectiveMileage \"{ \\\"Value\\\": 82563, \\\"Unit\\\": \\\"km\\\" }\"^^json:Object; \n              cx-lifetime:loadCollectiveRegistrationDate \"{ \\\"Value\\\": 20171206,  \\\"Unit\\\": \\\"yyyymmdd\\\" }\"^^json:Object; \n              cx-lifetime:remainingDistance ?distance; \n              cx-lifetime:remainingTime ?time.\n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/prognosis",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"prognosis"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "Query Backend/Complex Batch Binding",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT  * WHERE   { \n    VALUES ( ?registrationDate ?loadCollective ?partProg ?mileage ?binding497849171 ) {       \n        ( \"{ \\\"Value\\\": 20171206,  \\\"Unit\\\": \\\"yyyymmdd\\\" }\"^^<https://json-schema.org/draft/2020-12/schema#Object> \"{ \\\"Temp_Oil-class\\\": [1, 3, 4, 5, 7, 8, 12, 13, 17, 18, 20, 22, 23, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 47, 48, 49, 50, 51],  \\\"Counts\\\": [7.234E+01, 2.345E+02, 6.654E+02, 5.983E+01, 4.321E+02, 3.876E+02, 5.567E+01, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+02, 6.098E+02, 7.432E+02, 8.873E+02, 4.738E+01, 6.927E+01, 1.234E+02, 2.345E+02, 3.654E+02, 2.983E+01, 4.321E+01, 3.876E+02, 5.567E+02, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+01, 6.098E+01, 3.432E+02, 1.873E+02, 4.738E+02, 6.927E+02] }\"^^<https://json-schema.org/draft/2020-12/schema#Object> \"GearOil\" \"{ \\\"Value\\\": 82563, \\\"Unit\\\": \\\"km\\\" }\"^^<https://json-schema.org/draft/2020-12/schema#Object> \"0\" )     \n        ( \"{ \\\"Value\\\": 2030624,  \\\"Unit\\\": \\\"yyyymmdd\\\" }\"^^<https://json-schema.org/draft/2020-12/schema#Object> \"{ \\\"Temp_Oil-class\\\": [1, 3, 4, 5, 7, 8, 12, 13, 17, 18, 20, 22, 23, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 47, 48, 49, 50, 51],  \\\"Counts\\\": [7.234E+01, 2.345E+02, 6.654E+02, 5.983E+01, 4.321E+02, 3.876E+02, 5.567E+01, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+02, 6.098E+02, 7.432E+02, 8.873E+02, 4.738E+01, 6.927E+01, 1.234E+02, 2.345E+02, 3.654E+02, 2.983E+01, 4.321E+01, 3.876E+02, 5.567E+02, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+01, 6.098E+01, 3.432E+02, 1.873E+02, 4.738E+02, 6.927E+02] }\"^^<https://json-schema.org/draft/2020-12/schema#Object> \"GearOil\" \"{ \\\"Value\\\": 71333, \\\"Unit\\\": \\\"km\\\" }\"^^<https://json-schema.org/draft/2020-12/schema#Object> \"1\" )    \n        }     \n        \n        ?invocation  a  <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#LifetimePrognosis> ;               \n                     <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#loadCollectiveBody>  ?loadCollective ;               \n                     <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#loadCollectiveComponent>  ?partProg ;               \n                     <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#loadCollectiveMileage>  ?mileage ;               \n                     <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#loadCollectiveRegistrationDate>  ?registrationDate ;               \n                     <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#loadCollectiveFile>  \"{  \\\"Type\\\": \\\"ZF_load_collective\\\", \\\"Version\\\": \\\"1.7\\\"  }\"^^<https://json-schema.org/draft/2020-12/schema#Object> ;               \n                     <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#loadCollectiveHeader>  \"{  \\\"CountingMethod\\\": \\\"ZF_TimeAtLevel\\\",    \\\"CountingUnit\\\": \\\"s\\\",    \\\"Channels\\\": [      {        \\\"Name\\\": \\\"Temp_Oil\\\",        \\\"Type\\\": \\\"Load\\\",        \\\"Unit\\\": \\\"degC\\\",        \\\"LowerLimit\\\": -40,        \\\"UpperLimit\\\": 220,        \\\"NumberOfBins\\\": 52      }  ]  }\"^^<https://json-schema.org/draft/2020-12/schema#Object> ;               \n                     <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#remainingDistance>  ?distance ;               \n                     <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#remainingTime>  ?time   \n} "
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/prognosis",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"prognosis"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "Query Backend/Complex Batch Binding Bulk",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT  * WHERE   { VALUES ( ?countUnit ?adaptionValues ?channels ?counts ?classes ?assembly ?recordDate ?healthType ?operatingTime ?countMethod ?mileage ?binding550679972 ) {       ( \"unit:ONE\" \"[71.7413059278234, 174.913198550369, -25.33195885844512, -0.0030013199160016974]\"^^<https://json-schema.org/draft/2020-12/schema#Object> \"[{\\\"unit\\\": \\\"unit:rpm\\\", \\\"lowerLimit\\\": -100.0, \\\"upperLimit\\\": 12700.0, \\\"channelName\\\": \\\"N_TU\\\", \\\"numberOfBins\\\": 128}, {\\\"unit\\\": \\\"unit:Nm\\\", \\\"lowerLimit\\\": -1270.0, \\\"upperLimit\\\": 1290.0, \\\"channelName\\\": \\\"T_TU\\\", \\\"numberOfBins\\\": 128}, {\\\"unit\\\": \\\"unit:ONE\\\", \\\"lowerLimit\\\": -0.5, \\\"upperLimit\\\": 9.5, \\\"channelName\\\": \\\"Z_GANG\\\", \\\"numberOfBins\\\": 10}]\" \"0.00000022252268649936013\" \"1\" <urn:uuid:aaa7a395-5495-49a3-8ad7-3a66f25d388d> \"2022-08-11T00:00:00.000Z\"^^<http://www.w3.org/2001/XMLSchema#dateTime> \"Clutch\" \"3213\"^^<http://www.w3.org/2001/XMLSchema#int> \"LRD\" \"65432\"^^<http://www.w3.org/2001/XMLSchema#int> \"1\" )       ( \"unit:ONE\" \"[91.1931437876285, 82.87065725646937, 0.1323891300303766, 0.6915029359657375]\"^^<https://json-schema.org/draft/2020-12/schema#Object> \"[{\\\"unit\\\": \\\"unit:rpm\\\", \\\"lowerLimit\\\": -100.0, \\\"upperLimit\\\": 12700.0, \\\"channelName\\\": \\\"N_TU\\\", \\\"numberOfBins\\\": 128}, {\\\"unit\\\": \\\"unit:Nm\\\", \\\"lowerLimit\\\": -1270.0, \\\"upperLimit\\\": 1290.0, \\\"channelName\\\": \\\"T_TU\\\", \\\"numberOfBins\\\": 128}, {\\\"unit\\\": \\\"unit:ONE\\\", \\\"lowerLimit\\\": -0.5, \\\"upperLimit\\\": 9.5, \\\"channelName\\\": \\\"Z_GANG\\\", \\\"numberOfBins\\\": 10}]\" \"0.00000022134314292543422\" \"1\" <urn:uuid:4773625a-5e56-4879-abed-475be29bd664> \"2022-08-11T00:00:00.000Z\"^^<http://www.w3.org/2001/XMLSchema#dateTime> \"Clutch\" \"3213\"^^<http://www.w3.org/2001/XMLSchema#int> \"LRD\" \"65432\"^^<http://www.w3.org/2001/XMLSchema#int> \"0\" )     }     ?invocation  a                  <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#HealthIndication> ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#requestComponentId>  ?assembly ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#classifiedLoadCollectiveComponentDescription>  ?healthType ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#classifiedLoadCollectiveCountingValue>  ?countValue ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#classifiedLoadCollectiveCountingUnit>  ?countUnit ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#classifiedLoadCollectiveCountingMethod>  ?countMethod ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#classifiedLoadCollectiveChannels>  ?channels ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#classifiedLoadCollectiveClasses>  ?classes ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#classifiedLoadCollectiveCounts>  ?counts ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#adaptionValueVersion>  \"0.6.4\" ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#adaptionValueTimestamp>  ?recordDate ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#adaptionValueMileage>  ?mileage ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#adaptionValueOperatingTime>  ?operatingTime ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#adaptionValueList>  ?adaptionValues ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#indicatorVersion>  ?indicatorVersion ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#responseComponentId>  ?indicatorComponentId ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#healthIndicatorValues>  ?health   } "
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/health",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"health"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "Query Batch Binding",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT  * WHERE   {\n  VALUES ( ?countUnit ?adaptionValues ?channels ?counts ?classes ?assembly ?recordDate ?healthType ?operatingTime ?countMethod ?mileage ?binding550679972 ) {\n  ( \"unit:ONE\" \"[0.2, 0.3, 0.4]\"^^<https://json-schema.org/draft/2020-12/schema#Object> \"[ {\\\\x0A  \\\"unit\\\" : \\\"unit:rpm\\\",\\\\x0A  \\\"numberOfBins\\\" : 128,\\\\x0A  \\\"channelName\\\" : \\\"N_TU\\\",\\\\x0A  \\\"upperLimit\\\" : 12700.0,\\\\x0A  \\\"lowerLimit\\\" : -100.0\\\\x0A}, {\\\\x0A  \\\"unit\\\" : \\\"unit:Nm\\\",\\\\x0A  \\\"numberOfBins\\\" : 128,\\\\x0A  \\\"channelName\\\" : \\\"T_TU\\\",\\\\x0A  \\\"upperLimit\\\" : 1290.0,\\\\x0A  \\\"lowerLimit\\\" : -1270.0\\\\x0A}, {\\\\x0A  \\\"unit\\\" : \\\"unit:ONE\\\",\\\\x0A  \\\"numberOfBins\\\" : 10,\\\\x0A  \\\"channelName\\\" : \\\"Z_GANG\\\",\\\\x0A  \\\"upperLimit\\\" : 9.5,\\\\x0A  \\\"lowerLimit\\\" : -0.5\\\\x0A} ]\" \"{\\\\x0A  \\\"countsList\\\" : [ 8.165716991470617E-8, 2.6589701519696973E-5, 4.996414281777106E-5, 8.877176878741011E-5, 1.2583420902956277E-4, 2.1605499205179513E-4, 5.809103022329509E-4, 8.848882862366736E-4, 0.0011256651487201452, 0.0014202258316799998, 0.0014436225173994899, 0.0016900197369977832, 0.0023243564646691084, 0.0029973441269248724, 0.004415211733430624, 0.004894567653536797, 0.005345028359442949, 0.005830397829413414, 0.010435677133500576, 0.014282779768109322, 0.01441910769790411, 0.015517636202275753, 0.016832217574119568, 0.016946539282798767, 0.01801016554236412, 0.018330466002225876, 0.018912214785814285, 0.020088570192456245, 0.021580204367637634, 0.022674864158034325, 0.02454369328916073, 0.02779177948832512, 0.030732547864317894, 0.03433700650930405, 0.03941313177347183, 0.04150734096765518, 0.04265172779560089, 0.042704273015260696, 0.043251294642686844, 0.04357834905385971, 0.04631785675883293, 0.04637407511472702, 0.04712093621492386, 0.04748912900686264, 0.050515756011009216, 0.05066641792654991, 0.05156601592898369, 0.05449165776371956, 0.056410789489746094, 0.05758173391222954 ],\\\\x0A  \\\"countsName\\\" : \\\"Counts\\\"\\\\x0A}\" \"[ {\\\\x0A  \\\"className\\\" : \\\"N_TU-class\\\",\\\\x0A  \\\"classList\\\" : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 3, 3, 1, 3, 3, 2, 3, 2, 4, 2, 4, 5, 5, 5, 6, 6, 6, 6, 1, 2, 4, 2, 4, 6, 4, 4, 4, 2, 2 ]\\\\x0A}, {\\\\x0A  \\\"className\\\" : \\\"T_TU-class\\\",\\\\x0A  \\\"classList\\\" : [ 62, 65, 63, 63, 64, 63, 67, 64, 64, 64, 66, 65, 64, 65, 65, 64, 64, 62, 65, 65, 65, 62, 62, 64, 66, 62, 62, 62, 63, 66, 65, 65, 62, 62, 67, 62, 62, 62, 66, 64, 65, 62, 62, 62, 62, 66, 66, 66, 62, 65 ]\\\\x0A}, {\\\\x0A  \\\"className\\\" : \\\"Z_GANG-class\\\",\\\\x0A  \\\"classList\\\" : [ 5, 5, 9, 7, 8, 5, 1, 3, 4, 2, 1, 3, 2, 1, 4, 1, 5, 4, 9, 6, 7, 3, 7, 6, 6, 4, 3, 9, 3, 8, 5, 8, 8, 3, 5, 3, 6, 8, 8, 7, 2, 3, 6, 4, 7, 4, 6, 9, 5, 4 ]\\\\x0A} ]\" <urn:uuid:719133c9-d219-4278-b724-9f64efc42b42> \"2022-08-21T12:00:00.000Z\"^^<http://www.w3.org/2001/XMLSchema#dateTime> \"GearSet\" \"1282\"^^<http://www.w3.org/2001/XMLSchema#int> \"LRD\" \"76543\"^^<http://www.w3.org/2001/XMLSchema#int> \"0\" )     }     ?invocation  a                  <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#HealthIndication> ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#requestComponentId>  ?assembly ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#classifiedLoadCollectiveComponentDescription>  ?healthType ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#classifiedLoadCollectiveCountingValue>  ?countValue ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#classifiedLoadCollectiveCountingUnit>  ?countUnit ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#classifiedLoadCollectiveCountingMethod>  ?countMethod ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#classifiedLoadCollectiveChannels>  ?channels ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#classifiedLoadCollectiveClasses>  ?classes ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#classifiedLoadCollectiveCounts>  ?counts ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#adaptionValueVersion>  \"0.6.4\" ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#adaptionValueTimestamp>  ?recordDate ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#adaptionValueMileage>  ?mileage ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#adaptionValueOperatingTime>  ?operatingTime ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#adaptionValueList>  ?adaptionValues ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#indicatorVersion>  ?indicatorVersion ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#responseComponentId>  ?indicatorComponentId ;               <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#healthIndicatorValues>  ?health   }\n"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/health",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"health"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								},
								{
									"name": "Query FMEA Data",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX fx: <http://sparql.xyz/facade-x/ns/>\nPREFIX zag: <http://sparql.xyz/facade-x/data/>\n\nSELECT ?companyLabel ?companyName ?companyRole ?memberId ?memberSurname ?memberName ?memberCategory WHERE {\n  SERVICE <x-sparql-anything:fme.xml> {\n    fx:properties fx:use-rdfs-member \"true\"^^xsd:boolean.\n    ?companyNode rdf:type zag:COMPANY;\n             zag:ROLE ?companyRole;\n             rdfs:member [ rdf:type zag:LONG-NAME; rdfs:member [ rdf:type zag:L-4; rdfs:member ?companyName]];\n             rdfs:member [ rdf:type zag:SHORT-NAME; rdfs:member ?companyLabel].\n    ?companyNode rdfs:member [ \n       rdf:type zag:TEAM-MEMBERS;\n       rdfs:member [  \n          rdf:type zag:TEAM-MEMBER;\n          zag:ID ?memberId;\n          rdfs:member [ rdf:type zag:LONG-NAME; rdfs:member [ rdf:type zag:L-4; rdfs:member ?memberName]];\n          rdfs:member [ rdf:type zag:SHORT-NAME; rdfs:member ?memberSurname];\n          rdfs:member [ rdf:type zag:CATEGORY; rdfs:member ?memberCategory]\n        ]  \n    ].\n  }\n} "
										},
										"url": {
											"raw": "http://localhost:3000/sparql.anything",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"sparql.anything"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								}
							],
							"description": "A Collection of API Calls Against the Function Remoting Agents Directly Which Sits upon some REST Service.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "EDC (Intern)",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "Create Function Graph Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:tierA:LifetimeGearbox\",\n      \"asset:prop:contract\": \"<urn:cx:Graph:tierA>\",\n      \"asset:prop:name\": \"Lifetime Prognosis Service for Gearboxes\",\n      \"asset:prop:description\": \"A sample graph asset/offering referring to a specific prognosis resource.\",\n      \"asset:prop:version\": \"0.7.5-SNAPSHOT\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"rdf:type\":\"<{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>\",\n      \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/prognosis_ontology.ttl>\",\n      \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n      \"cx:shape\": \"@prefix : <urn:cx:Graph:tierA:LifetimeGearbox> .\\n@prefix cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#> .\\n@prefix cx-lifetime: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/prognosis_ontology.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n :Tier1LifetimePrognosis rdf:type sh:NodeShape ;\\n  sh:targetClass cx-lifetime:LifetimePrognosis ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003CPIY> ].\\n\",\n      \"cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:tierA:LifetimeGearbox\",\n      \"baseUrl\": \"http://tiera-remoting-agent:8081/rdf4j-server/repositories/prognosis\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\",\n      \"authKey\": \"{{supplierBackendAuthKey}}\",\n      \"authCode\": \"{{supplierBackendAuthCode}}\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/data/assets",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"data",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create Second Function Graph Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:tierA:HealthIndicatorGearbox\",\n      \"asset:prop:contract\": \"<urn:cx:Graph:tierA>\",\n      \"asset:prop:name\": \"Health Indications Service for Gearboxes\",\n      \"asset:prop:description\": \"Another sample graph asset/offering referring to a specific prognosis resource.\",\n      \"asset:prop:version\": \"0.7.3-SNAPSHOT\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"rdf:type\":\"<{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>\",\n      \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/load_spectum_ontology.ttl>\",\n      \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n      \"cx:shape\": \"@prefix : <urn:cx:Graph:tierA:HealthIndicatorGearbox> .\\n@prefix cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#> .\\n@prefix cx-lifetime: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/load_spectrum_ontology.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n :Tier1LifetimePrognosis rdf:type sh:NodeShape ;\\n  sh:targetClass cx-lifetime:LifetimePrognosis ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003CPIY> ].\\n\",\n      \"cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:tierA:HealthIndicatorGearbox\",\n      \"baseUrl\": \"http://tiera-remoting-agent:8081/rdf4j-server/repositories/health\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\",\n      \"authKey\": \"{{supplierBackendAuthKey}}\",\n      \"authCode\": \"{{supplierBackendAuthCode}}\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/data/assets",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"data",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create 3rd Graph Asset Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:tierA:TraceabilityAsPlanned\",\n      \"asset:prop:contract\": \"<urn:cx:Graph:tierA>\",\n      \"asset:prop:name\": \"Supplier portion of the Traceability As-Planned Testdataset.\",\n      \"asset:prop:description\": \"A graph asset/offering mounting Carena-X Testdata for Traceability.\",\n      \"asset:prop:version\": \"CX_Testdata_v1.4.1-AsPlanned\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"rdf:type\":\"<{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>\",\n      \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/part_ontology.ttl>\",\n      \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n      \"cx:shape\": \"@prefix : <urn:cx:Graph:tierA:TraceabilityAsPlanned> .\\n@prefix cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\nOemAssemblyGroup rdf:type sh:NodeShape ;\\n  sh:targetClass cx:AssemblyGroup ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003AYRE> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx:Version ;\\n        sh:hasValue 0^^xsd:long ;\\n    ] ;\\n  sh:property [\\n        sh:path cx: ;\\n        sh:class SupplierParts ;\\n    ] ;\\n\\nSupplierParts rdf:type sh:NodeShape ;\\n  sh:targetClass cx:Part ;\\n  sh:property [\\n        sh:path cx:isProducedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003B2OM> ;\\n    ] ;\\n\",\n      \"cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:tierA:TraceabilityAsPlanned\",\n      \"baseUrl\": \"http://oem-provider-agent:8082/sparql\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\",\n      \"authKey\": \"{{oemBackendAuthKey}}\",\n      \"authCode\": \"{{oemBackendAuthCode}}\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/data/assets",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"data",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph asset."
											},
											"response": []
										},
										{
											"name": "Create Graph Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"urn:cx:Policy:tierA\",\n  \"policy\": {\n      \"permissions\": [\n        {\n        \"action\": {\n        \"type\": \"USE\"\n        },\n        \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/data/policydefinitions",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"data",
														"policydefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a graph policy."
											},
											"response": []
										},
										{
											"name": "Create Graph Contract Definition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\":\"urn_cx_Graph_tierA\",\n  \"accessPolicyId\": \"urn:cx:Policy:tierA\",\n  \"contractPolicyId\": \"urn:cx:Policy:tierA\",\n  \"criteria\": [ {\n      \"operandLeft\": \"asset:prop:contract\",\n      \"operator\":\"=\",\n      \"operandRight\":\"<urn:cx:Graph:tierA>\"\n  }]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tieraEdcControl}}/data/contractdefinitions",
													"host": [
														"{{tieraEdcControl}}"
													],
													"path": [
														"data",
														"contractdefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a contract."
											},
											"response": []
										}
									]
								},
								{
									"name": "Check Probe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check was successful\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json()).to.have.property(\"isSystemHealthy\",true);",
													"    pm.expect(pm.response.json()).to.have.property(\"componentResults\");",
													"    pm.expect(pm.response.json().componentResults).to.have.length.greaterThan(0);",
													"    pm.response.json().componentResults.map( function(component) {",
													"        pm.expect(component).to.have.property(\"isHealthy\",true);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{tieraEdcApi}}/api/check/:stage",
											"host": [
												"{{tieraEdcApi}}"
											],
											"path": [
												"api",
												"check",
												":stage"
											],
											"variable": [
												{
													"key": "stage",
													"value": "startup",
													"description": "You may choose startup, readiness or liveness"
												}
											]
										},
										"description": "Health Check Interface of EDC planes"
									},
									"response": []
								},
								{
									"name": "Delete Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											}
										],
										"url": {
											"raw": "{{tieraEdcControl}}/data/assets/:asset",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"data",
												"assets",
												":asset"
											],
											"variable": [
												{
													"key": "asset",
													"value": "urn:cx:Graph:tiera:TraceabilityAsPlanned"
												}
											]
										},
										"description": "Calls the datamanagement API in order to create a skill asset."
									},
									"response": []
								},
								{
									"name": "List Assets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(asset) {",
													"        pm.expect(asset).to.have.property(\"properties\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:id\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:name\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:contenttype\");",
													"        var contenttypes=asset.properties[\"asset:prop:contenttype\"].split(\",\").map(function(type) { return type.trim();});",
													"        contenttypes.map(function(contenttype) {",
													"            var contenttypespec=contenttype.split(\";\");",
													"            pm.expect(contenttypespec[0]).oneOf([\"application/json\",\"application/xml\",\"application/cx-skill\"]);",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{tieraEdcControl}}/data/assets",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"data",
												"assets"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the assets."
									},
									"response": []
								},
								{
									"name": "List Policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(policy) {",
													"        pm.expect(policy).to.have.property(\"uid\");",
													"        pm.expect(policy).to.have.property(\"permissions\");",
													"        pm.expect(policy.permissions).to.have.length.gte(0);",
													"        policy.permissions.map(function(permission) {",
													"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
													"            pm.expect(permission).to.have.property(\"target\");",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{tieraEdcControl}}/data/policydefinitions",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"data",
												"policydefinitions"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the policies."
									},
									"response": []
								},
								{
									"name": "Show Catalogue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Catalogue listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"id\");",
													"    pm.expect(pm.response.json()).to.have.property(\"contractOffers\");",
													"    pm.expect(pm.response.json().contractOffers).to.have.length.gte(0);",
													"    pm.response.json().contractOffers.map(function(contractOffer) {",
													"        pm.expect(contractOffer).to.have.property(\"id\");",
													"        pm.expect(contractOffer).to.have.property(\"policy\");",
													"        pm.expect(contractOffer).to.have.property(\"asset\");",
													"        pm.expect(contractOffer.asset).to.have.property(\"properties\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:id\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:name\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:contenttype\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{tieraEdcControl}}/data/catalog?providerUrl={{tieraEdcIds}}/api/v1/ids/data",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"data",
												"catalog"
											],
											"query": [
												{
													"key": "providerUrl",
													"value": "{{tieraEdcIds}}/api/v1/ids/data"
												}
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
									},
									"response": []
								},
								{
									"name": "Perform a  Remote SparQL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tieraAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} LIMIT 100&asset={{oemEdcIds}}%23urn:cx:Graph:oem:Diagnosis2022",
											"host": [
												"{{tieraAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} LIMIT 100"
												},
												{
													"key": "asset",
													"value": "http://oem-control-plane:8282%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcIds}}%23urn:cx:Graph:oem:Diagnosis2022"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								}
							],
							"description": "A Collection of Calls Against the EDC control and dataplane sitting on top of the remoting backend."
						}
					],
					"description": "A Collection of API Calls Against the Function Remoting Components of the Dataspace.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{oemPassword}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{oemUser}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Consumer (Federating Agent)",
					"item": [
						{
							"name": "EDC (intern)",
							"item": [
								{
									"name": "Setup",
									"item": [
										{
											"name": "Create Skill Asset",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"asset\": {\n        \"properties\": {\n            \"asset:prop:id\": \"urn:cx:Skill:consumer:Lifetime\",\n            \"asset:prop:contract\": \"<urn:cx:Skill:consumer>\",\n            \"asset:prop:name\": \"Remaining Useful Lifetime Skill for Vehicles\",\n            \"asset:prop:description\": \"A sample skill asset/offering implemented via SparQL.\",\n            \"asset:prop:version\": \"0.7.4-SNAPSHOT\",\n            \"asset:prop:contenttype\": \"application/json, application/xml\",\n            \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n            \"rdf:type\": \"<{{cxOntologyRoot}}/cx_ontology.ttl#SkillAsset>\",\n            \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/diagnosis_ontology.ttl>,<{{cxOntologyRoot}}/part_ontology.ttl>,<{{cxOntologyRoot}}/prognosis_ontology.ttl>\",\n            \"cx:isFederated\": true,\n            \"cx:shape\": \"PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\\nPREFIX cx-telematics: <https://github.com/catenax-ng/product-knowledge/ontology/telematics.ttl#>\\nPREFIX cx-lifetime:   <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\\n\\n##############################################################################################\\n#                  Catena-X Knowledge Agents Sample Federated Skill                          #\\n#                         Realizes a 5-Step Business Process                                 #\\n#            \\\"Remaining Useful Life Prognosis based on Diagnosis TroubleCodes\\\"               #\\n##############################################################################################\\n# Preconditions:                                                                             #\\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\\n#   - VIN-VAN Conversion                                                                     #\\n#   - DTC Analysis/Resolution (including the READING of PartType and Description)            #\\n#   - Serial Part & SUPPLIER Lookup                                                          #\\n# - A Contract Offering from SUPPLIER (e.g. ZF) to OEM                                       #\\n#   - Telematics data (including the PROPAGATION of LoadSpectrum)                            #\\n#   - RUL Prognosis Invocation (including the DISTRIBUTION of RUL results)                   #\\n##############################################################################################\\n\\n####\\n# 5. Project the actual output of the Skill on CONSUMER side\\n####\\nSELECT  ?van ?description ?serializedPartName ?distance ?time ?vin ?troubleCode WHERE {\\n\\n    ####\\n    # 1. The CONSUMER detects a trouble code on a car in his fleet\\n    ####\\n    VALUES (?vin ?troubleCode) { (\\\"@vin\\\"^^xsd:string \\\"@troubleCode\\\"^^xsd:string) }.\\n    \\n    ####\\n    # 2. The CONSUMER looks up the OEM (connector) associated to the VIN \\n    #    using the Federated Data Catalogue  (Catalogue=Default Graph)\\n    ####\\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\\n         cx:hasConnector ?oemConnector.\\n\\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\\n    ?diagnoseAsset rdfs:isDefinedBy \\\"https://github.com/catenax-ng/product-knowledge/ontology/diagnosis_ontology.ttl\\\"^^xsd:string.\\n\\n    ####\\n    # 3. The CONSUMER delegates the following logic to the OEM (connector)\\n    ####\\n    SERVICE ?oemConnector { \\n\\n        ####\\n        # 3.1 The OEM (e.g. BMW) anomyzes the VIN into an anomymous (VAN) node\\n        #.    and gets some master data with it \\n        ####\\n        ?van cx:isAnonymousVehicle ?vin;\\n             cx:hasRegistration ?registration.\\n\\n        ####\\n        # 3.2 The OEM analyzes the DTC-affected part type (Diagnosis Graph)\\n        ####\\n        GRAPH ?diagnoseAsset {\\n\\n           ?Dtc rdf:type cx-diag:DTC; \\n                cx-diag:Code ?troubleCode;\\n                cx-diag:affects [ cx-diag:EnDenomination ?partType ]; \\n                cx-diag:Description ?description.\\n        \\n        } # OEM#Diagnosis context\\n\\n        ####\\n        # 3.3 The OEM obtains fresh telematics/load-spectrum data for the vehicle\\n        #     focussed to the problematic partType (Telematics Graph) \\n        ####\\n        ?van cx-telematics:latestMileageReceived ?mileage;\\n             cx-telematics:latestDetailReceived ?telematicsDetail.\\n        ?telematicsDetail cx-diag:hasPartType ?partType;\\n                          cx-diag:hasLoadSpectrum ?loadSpectrum.\\n\\n        ####\\n        # 3.4 The OEM looks up the serialized part of the VAN (Traceability Graph)\\n        #     and the supplier address in the dataspace\\n        ####\\n        ?serializedPart cx:isComponentOf+ ?van;\\n                        cx:hasPartType ?partType;\\n                        cx:hasName ?serializedPartName;\\n                        cx:hasSupplier [\\n                            cx:hasConnector ?tieraConnector\\n                        ].           \\n\\n        ?tieraConnector cx:offersAsset ?prognosisAsset.\\n        ?prognosisAsset rdfs:isDefinedBy \\\"https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#\\\"^^xsd:string.\\n\\n        ####\\n        # 4. The OEM (and not the CONSUMER) delegates to the SUPPLIER (connector)\\n        #    which means that load spectrum data etc is only exchanged using their\\n        #    contract and between their connectors.\\n        ####\\n        SERVICE ?tieraConnector { \\n\\n            ####\\n            # 4.1 The SUPPLIER adds additional measurement information\\n            ####\\n            ?telematicsDetail cx-telematics:hasFile ?loadSpectrumFile;\\n                              cx-telematics:hasHeader ?loadSpectrumHeader.\\n\\n            ####\\n            # 4.2 The SUPPLIER invokes a prognosis model associated the part type using the load-spectrum data\\n            ####\\n            GRAPH ?prognosisAsset {\\n\\n                ?invocation rdf:type cx-lifetime:LifetimePrognosis;\\n                    \\n                    # <--General vehicle info\\n                    cx-lifetime:loadCollectiveMileage ?mileage;\\n                    cx-lifetime:loadCollectiveRegistrationDate ?registration;\\n\\n                    # <--Part Info from the OEM\\n                    cx-lifetime:loadCollectiveComponent ?serializedPartName;\\n                    cx-lifetime:loadCollectiveBody ?loadSpectrum;\\n                    \\n                    # <--Additional info from the SUPPLIER\\n                    cx-lifetime:loadCollectiveFile ?loadSpectrumFile;\\n                    cx-lifetime:loadCollectiveHeader ?loadSpectrumHeader; \\n                    \\n                    # -->the actual prognosis output\\n                    cx-lifetime:remainingDistance ?distance; \\n                    cx-lifetime:remainingTime ?time.\\n            \\n            } # SUPPLIER#Prognosis context\\n        \\n        } # SUPPLIER context\\n\\n    } # OEM context\\n\\n   # now we do reporting/operationalising on the CONSUMER side\\n} ORDER BY ?remainingDistance LIMIT 5\"\n        }\n    },\n    \"dataAddress\": {\n        \"properties\": {\n            \"asset:prop:id\": \"urn:cx:Skill:consumer:Lifetime\",\n            \"type\": \"urn:cx:Protocol:w3c:Http#SKILL#SPARQL\",\n            \"query\": \"PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\\nPREFIX cx-telematics: <https://github.com/catenax-ng/product-knowledge/ontology/telematics.ttl#>\\nPREFIX cx-lifetime:   <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\\n\\n##############################################################################################\\n#                  Catena-X Knowledge Agents Sample Federated Skill                          #\\n#                         Realizes a 5-Step Business Process                                 #\\n#            \\\"Remaining Useful Life Prognosis based on Diagnosis TroubleCodes\\\"               #\\n##############################################################################################\\n# Preconditions:                                                                             #\\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\\n#   - VIN-VAN Conversion                                                                     #\\n#   - DTC Analysis/Resolution (including the READING of PartType and Description)            #\\n#   - Serial Part & SUPPLIER Lookup                                                          #\\n# - A Contract Offering from SUPPLIER (e.g. ZF) to OEM                                       #\\n#   - Telematics data (including the PROPAGATION of LoadSpectrum)                            #\\n#   - RUL Prognosis Invocation (including the DISTRIBUTION of RUL results)                   #\\n##############################################################################################\\n\\n####\\n# 5. Project the actual output of the Skill on CONSUMER side\\n####\\nSELECT  ?van ?description ?serializedPartName ?distance ?time ?vin ?troubleCode WHERE {\\n\\n    ####\\n    # 1. The CONSUMER detects a trouble code on a car in his fleet\\n    ####\\n    VALUES (?vin ?troubleCode) { (\\\"@vin\\\"^^xsd:string \\\"@troubleCode\\\"^^xsd:string) }.\\n    \\n    ####\\n    # 2. The CONSUMER looks up the OEM (connector) associated to the VIN \\n    #    using the Federated Data Catalogue  (Catalogue=Default Graph)\\n    ####\\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\\n         cx:hasConnector ?oemConnector.\\n\\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\\n    ?diagnoseAsset rdfs:isDefinedBy \\\"https://github.com/catenax-ng/product-knowledge/ontology/diagnosis_ontology.ttl\\\"^^xsd:string.\\n\\n    ####\\n    # 3. The CONSUMER delegates the following logic to the OEM (connector)\\n    ####\\n    SERVICE ?oemConnector { \\n\\n        ####\\n        # 3.1 The OEM (e.g. BMW) anomyzes the VIN into an anomymous (VAN) node\\n        #.    and gets some master data with it \\n        ####\\n        ?van cx:isAnonymousVehicle ?vin;\\n             cx:hasRegistration ?registration.\\n\\n        ####\\n        # 3.2 The OEM analyzes the DTC-affected part type (Diagnosis Graph)\\n        ####\\n        GRAPH ?diagnoseAsset {\\n\\n           ?Dtc rdf:type cx-diag:DTC; \\n                cx-diag:Code ?troubleCode;\\n                cx-diag:affects [ cx-diag:EnDenomination ?partType ]; \\n                cx-diag:Description ?description.\\n        \\n        } # OEM#Diagnosis context\\n\\n        ####\\n        # 3.3 The OEM obtains fresh telematics/load-spectrum data for the vehicle\\n        #     focussed to the problematic partType (Telematics Graph) \\n        ####\\n        ?van cx-telematics:latestMileageReceived ?mileage;\\n             cx-telematics:latestDetailReceived ?telematicsDetail.\\n        ?telematicsDetail cx-diag:hasPartType ?partType;\\n                          cx-diag:hasLoadSpectrum ?loadSpectrum.\\n\\n        ####\\n        # 3.4 The OEM looks up the serialized part of the VAN (Traceability Graph)\\n        #     and the supplier address in the dataspace\\n        ####\\n        ?serializedPart cx:isComponentOf+ ?van;\\n                        cx:hasPartType ?partType;\\n                        cx:hasName ?serializedPartName;\\n                        cx:hasSupplier [\\n                            cx:hasConnector ?tieraConnector\\n                        ].           \\n\\n        ?tieraConnector cx:offersAsset ?prognosisAsset.\\n        ?prognosisAsset rdfs:isDefinedBy \\\"https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#\\\"^^xsd:string.\\n\\n        ####\\n        # 4. The OEM (and not the CONSUMER) delegates to the SUPPLIER (connector)\\n        #    which means that load spectrum data etc is only exchanged using their\\n        #    contract and between their connectors.\\n        ####\\n        SERVICE ?tieraConnector { \\n\\n            ####\\n            # 4.1 The SUPPLIER adds additional measurement information\\n            ####\\n            ?telematicsDetail cx-telematics:hasFile ?loadSpectrumFile;\\n                              cx-telematics:hasHeader ?loadSpectrumHeader.\\n\\n            ####\\n            # 4.2 The SUPPLIER invokes a prognosis model associated the part type using the load-spectrum data\\n            ####\\n            GRAPH ?prognosisAsset {\\n\\n                ?invocation rdf:type cx-lifetime:LifetimePrognosis;\\n                    \\n                    # <--General vehicle info\\n                    cx-lifetime:loadCollectiveMileage ?mileage;\\n                    cx-lifetime:loadCollectiveRegistrationDate ?registration;\\n\\n                    # <--Part Info from the OEM\\n                    cx-lifetime:loadCollectiveComponent ?serializedPartName;\\n                    cx-lifetime:loadCollectiveBody ?loadSpectrum;\\n                    \\n                    # <--Additional info from the SUPPLIER\\n                    cx-lifetime:loadCollectiveFile ?loadSpectrumFile;\\n                    cx-lifetime:loadCollectiveHeader ?loadSpectrumHeader; \\n                    \\n                    # -->the actual prognosis output\\n                    cx-lifetime:remainingDistance ?distance; \\n                    cx-lifetime:remainingTime ?time.\\n            \\n            } # SUPPLIER#Prognosis context\\n        \\n        } # SUPPLIER context\\n\\n    } # OEM context\\n\\n   # now we do reporting/operationalising on the CONSUMER side\\n} ORDER BY ?remainingDistance LIMIT 5\",\n            \"proxyPath\": \"false\",\n            \"proxyMethod\": \"false\",\n            \"proxyQueryParams\": \"true\",\n            \"proxyBody\": \"false\"\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/data/assets",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"data",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill asset."
											},
											"response": []
										},
										{
											"name": "Create Skill Asset2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:consumer:TroubleCodeSearch\",\n      \"asset:prop:contract\": \"<urn:cx:Skill:consumer>\",\n      \"asset:prop:name\": \"Investigate Possible Trouble Codes per Vehicle and AssemblyGroupy\",\n      \"asset:prop:description\": \"Another sample skill asset/offering implemented via SparQL.\",\n      \"asset:prop:version\": \"0.7.4-SNAPSHOT\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n      \"rdf:type\":\"<{{cxOntologyRoot}}/cx_ontology.ttl#SkillAsset>\",\n      \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/diagnosis_ontology.ttl>,<{{cxOntologyRoot}}/vehicle_ontology.ttl>,<{{cxOntologyRoot}}/common_ontology.ttl>\",\n      \"cx:isFederated\": true,\n      \"cx:shape\":\"PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#>\\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\\n\\n##############################################################################################\\n#              Catena-X Knowledge Agents Sample Federated Search Skill                       #\\n#                     Implements Trouble-Code Search based on VINs                           #\\n##############################################################################################\\n# Preconditions:                                                                             #\\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\\n#   - VIN-VAN Conversion                                                                     #\\n#   - DTC Analysis/Resolution (including the READING of Version and Description)             #\\n##############################################################################################\\n\\nSELECT ?problemArea ?vin ?codeNumber ?description ?version WHERE {\\n\\n    ####\\n    # Three parameters to the custom search\\n    ####\\n    VALUES (?vin ?problemArea ?minVersion) {(\\\"@vin\\\"^^xsd:string \\\"@problemArea\\\"^^xsd:string \\\"@minVersion\\\"^^xsd:long)}\\n\\n    ####\\n    # Lookup the responsible OEM(s)\\n    ####\\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\\n         cx:hasConnector ?oemConnector.\\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\\n    ?diagnoseAsset rdfs:isDefinedBy \\\"https://github.com/catenax-ng/product-knowledge/ontology/diagnosis_ontology.ttl\\\"^^xsd:string.\\n\\n    ####\\n    # Delegate to the revelant connector(s) and asset(s)\\n    ####\\n    SERVICE ?oemConnector {\\n        GRAPH ?diagnoseAsset {\\n\\n            ?Dtc rdf:type cx-diag:DTC;\\n                 cx-diag:Code ?codeNumber;\\n                 cx-diag:Description ?description;\\n                 cx-diag:Version ?version.\\n\\n            FILTER ( CONTAINS(?description, ?problemArea) && ?version >= ?minVersion)\\n       \\n        } # Graph Asset\\n    } # Remote Connector\\n} # Search\"\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:consumer:TroubleCodeSearch\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SKILL#SPARQL\",\n      \"query\": \"PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#>\\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\\n\\n##############################################################################################\\n#              Catena-X Knowledge Agents Sample Federated Search Skill                       #\\n#                     Implements Trouble-Code Search based on VINs                           #\\n##############################################################################################\\n# Preconditions:                                                                             #\\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\\n#   - VIN-VAN Conversion                                                                     #\\n#   - DTC Analysis/Resolution (including the READING of Version and Description)             #\\n##############################################################################################\\n\\nSELECT ?problemArea ?vin ?codeNumber ?description ?version WHERE {\\n\\n    ####\\n    # Three parameters to the custom search\\n    ####\\n    VALUES (?vin ?problemArea ?minVersion) {(\\\"@vin\\\"^^xsd:string \\\"@problemArea\\\"^^xsd:string \\\"@minVersion\\\"^^xsd:long)}\\n\\n    ####\\n    # Lookup the responsible OEM(s)\\n    ####\\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\\n         cx:hasConnector ?oemConnector.\\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\\n    ?diagnoseAsset rdfs:isDefinedBy \\\"https://github.com/catenax-ng/product-knowledge/ontology/diagnosis_ontology.ttl\\\"^^xsd:string.\\n\\n    ####\\n    # Delegate to the revelant connector(s) and asset(s)\\n    ####\\n    SERVICE ?oemConnector {\\n        GRAPH ?diagnoseAsset {\\n\\n            ?Dtc rdf:type cx-diag:DTC;\\n                 cx-diag:Code ?codeNumber;\\n                 cx-diag:Description ?description;\\n                 cx-diag:Version ?version.\\n\\n            FILTER ( CONTAINS(?description, ?problemArea) && ?version >= ?minVersion)\\n       \\n        } # Graph Asset\\n    } # Remote Connector\\n} # Search\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"false\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"false\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/data/assets",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"data",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill asset."
											},
											"response": []
										},
										{
											"name": "Create Skill Asset3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:consumer:MaterialIncident\",\n      \"asset:prop:contract\": \"<urn:cx:Skill:consumer>\",\n      \"asset:prop:name\": \"Analyse Sources and Impact of Geographically Fenced Material Incidents\",\n      \"asset:prop:description\": \"Another sample skill asset/offering implemented via SparQL.\",\n      \"asset:prop:version\": \"0.7.5-SNAPSHOT\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n      \"rdf:type\":\"<{{cxOntologyRoot}}/cx_ontology.ttl#SkillAsset>\",\n      \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/material_ontology.ttl>,<{{cxOntologyRoot}}/part_ontology.ttl>,<{{cxOntologyRoot}}/common_ontology.ttl>\",\n      \"cx:isFederated\": true,\n      \"cx:shape\":\"PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \\n\\n######\\n# Sample \\\"Material Incident\\\" Search Skill \\n# An incident has\\n# - a description of the target material\\n# - a geographical region (as a spatial segment)\\n# The skill produces\\n# - incident site(s) and source part(s)\\n# - affected product(s) and organization(s)\\n# - (m)bom trace(s) from source to product \\n######\\n\\nSELECT ?site ?part ?partName ?vendor ?product ?productName ?lat ?lon ?part2 ?part3 ?part4 ?site2 ?site3 ?site4 ?site5 ?lat2 ?lon2 ?lat3 ?lon3 ?lat4 ?lon4 ?lat5 ?lon5 WHERE {\\n\\n  VALUES (?material ?latmin ?latmax ?lonmin ?lonmax) { \\n      (\\\"@material\\\"^^xsd:string \\\"@latmin\\\"^^xsd:double \\\"@latmax\\\"^^xsd:double \\\"@lonmin\\\"^^xsd:double \\\"@lonmax\\\"^^xsd:double) \\n  }\\n\\n  ## Look for production sites in the region\\n  ## using the BPNM/Golden Record Catalogue\\n  ?site cx:hasGeoInformation [\\n      cx:hasLatitude ?lat;\\n      cx:hasLongitude ?lon\\n  ].\\n  FILTER( ?lat >=  ?latmin && ?lat <= ?latmax &&\\n          ?lon >=  ?lonmin && ?lon <= ?lonmax)\\n  \\n  ## Find the connector address of the responsible\\n  ## businesspartner/orga from the federated data catalogue \\n  ?incidentOrga cx:hasSite ?site;\\n        cx:hasConnector ?connectorUrl.\\n        \\n  SERVICE ?connectorUrl {\\n\\n      ## Is there a product which has the incident \\\"material\\\"\\n      ## workaround: use the part name\\n       ?part rdf:type cx:Part;\\n         cx:partName ?partName;\\n         cx:isProducedBy ?site.\\n       FILTER( CONTAINS(?partName, ?material)).\\n\\n      ?part cx:isPartOf ?part2.\\n      ?part2 cx:partName ?part2Name;\\n             cx:isProducedBy ?site2.\\n  \\n      OPTIONAL {\\n          ?part2 cx:isPartOf ?part3.\\n          ?part3 cx:partName ?part3Name;\\n                 cx:isProducedBy ?site3.\\n      }\\n\\n     OPTIONAL {\\n          ?part3 cx:isPartOf ?part4.\\n          ?part4 cx:partName ?part4Name;\\n                 cx:isProducedBy ?site4.\\n     }\\n\\n      OPTIONAL {\\n          ?part4 cx:isPartOf ?product.\\n          ?product cx:partName ?productName;\\n                   cx:isProducedBy ?site5.\\n     }\\n  }\\n\\n  ?vendor cx:hasSite ?site5.\\n  ?site2 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat2;\\n      cx:hasLongitude ?lon2\\n  ].\\n  ?site3 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat3;\\n      cx:hasLongitude ?lon3\\n  ].\\n  ?site4 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat4;\\n      cx:hasLongitude ?lon4\\n  ].\\n  ?site5 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat5;\\n      cx:hasLongitude ?lon5\\n  ].\\n} \\n\"\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:consumer:MaterialIncident\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SKILL#SPARQL\",\n      \"query\": \"PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \\n\\n######\\n# Sample \\\"Material Incident\\\" Search Skill \\n# An incident has\\n# - a description of the target material\\n# - a geographical region (as a spatial segment)\\n# The skill produces\\n# - incident site(s) and source part(s)\\n# - affected product(s) and organization(s)\\n# - (m)bom trace(s) from source to product \\n######\\n\\nSELECT ?site ?part ?partName ?vendor ?product ?productName ?lat ?lon ?part2 ?part3 ?part4 ?site2 ?site3 ?site4 ?site5 ?lat2 ?lon2 ?lat3 ?lon3 ?lat4 ?lon4 ?lat5 ?lon5 WHERE {\\n\\n  VALUES (?material ?latmin ?latmax ?lonmin ?lonmax) { \\n      (\\\"@material\\\"^^xsd:string \\\"@latmin\\\"^^xsd:double \\\"@latmax\\\"^^xsd:double \\\"@lonmin\\\"^^xsd:double \\\"@lonmax\\\"^^xsd:double) \\n  }\\n\\n  ## Look for production sites in the region\\n  ## using the BPNM/Golden Record Catalogue\\n  ?site cx:hasGeoInformation [\\n      cx:hasLatitude ?lat;\\n      cx:hasLongitude ?lon\\n  ].\\n  FILTER( ?lat >=  ?latmin && ?lat <= ?latmax &&\\n          ?lon >=  ?lonmin && ?lon <= ?lonmax)\\n  \\n  ## Find the connector address of the responsible\\n  ## businesspartner/orga from the federated data catalogue \\n  ?incidentOrga cx:hasSite ?site;\\n        cx:hasConnector ?connectorUrl.\\n        \\n  SERVICE ?connectorUrl {\\n\\n      ## Is there a product which has the incident \\\"material\\\"\\n      ## workaround: use the part name\\n       ?part rdf:type cx:Part;\\n         cx:partName ?partName;\\n         cx:isProducedBy ?site.\\n       FILTER( CONTAINS(?partName, ?material)).\\n\\n      ?part cx:isPartOf ?part2.\\n      ?part2 cx:partName ?part2Name;\\n             cx:isProducedBy ?site2.\\n  \\n      OPTIONAL {\\n          ?part2 cx:isPartOf ?part3.\\n          ?part3 cx:partName ?part3Name;\\n                 cx:isProducedBy ?site3.\\n      }\\n\\n     OPTIONAL {\\n          ?part3 cx:isPartOf ?part4.\\n          ?part4 cx:partName ?part4Name;\\n                 cx:isProducedBy ?site4.\\n     }\\n\\n      OPTIONAL {\\n          ?part4 cx:isPartOf ?product.\\n          ?product cx:partName ?productName;\\n                   cx:isProducedBy ?site5.\\n     }\\n  }\\n\\n  ?vendor cx:hasSite ?site5.\\n  ?site2 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat2;\\n      cx:hasLongitude ?lon2\\n  ].\\n  ?site3 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat3;\\n      cx:hasLongitude ?lon3\\n  ].\\n  ?site4 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat4;\\n      cx:hasLongitude ?lon4\\n  ].\\n  ?site5 cx:hasGeoInformation [\\n      cx:hasLatitude ?lat5;\\n      cx:hasLongitude ?lon5\\n  ].\\n} \\n\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"false\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"false\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/data/assets",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"data",
														"assets"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill asset."
											},
											"response": []
										},
										{
											"name": "Create Skill Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"urn:cx:Policy:consumer\",\n  \"policy\": {\n      \"permissions\": [\n        {\n        \"action\": {\n            \"type\": \"USE\"\n        },\n        \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/data/policydefinitions",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"data",
														"policydefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill policy."
											},
											"response": []
										},
										{
											"name": "Create Skill Contract Definition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\":\"urn_cx_Skill_consumer\",\n  \"accessPolicyId\": \"urn:cx:Policy:consumer\",\n  \"contractPolicyId\": \"urn:cx:Policy:consumer\",\n  \"criteria\": [ {\n      \"operandLeft\": \"asset:prop:contract\",\n      \"operator\":\"=\",\n      \"operandRight\":\"<urn:cx:Skill:consumer>\"\n  }]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/data/contractdefinitions",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"data",
														"contractdefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill contract."
											},
											"response": []
										},
										{
											"name": "Create Traceability Graph Asset",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:ntier:TraceabilityAsPlanned\",\n      \"asset:prop:contract\": \"<urn:cx:Graph:ntier>\",\n      \"asset:prop:name\": \"TierN portion of the Traceability As-Planned Testdataset.\",\n      \"asset:prop:description\": \"A graph asset/offering mounting Carena-X Testdata for Traceability.\",\n      \"asset:prop:version\": \"CX_Testdata_v1.4.1-AsPlanned\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"rdf:type\":\"<{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>\",\n      \"rdfs:isDefinedBy\": \"<{{cxOntologyRoot}}/part_ontology.ttl>\",\n      \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n      \"cx:shape\": \"@prefix : <urn:cx:Graph:ntier:TraceabilityAsPlanned> .\\n@prefix cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\nOemAssemblyGroup rdf:type sh:NodeShape ;\\n  sh:targetClass cx:AssemblyGroup ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <bpn:legal:BPNL00000003AYRE> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx:Version ;\\n        sh:hasValue 0^^xsd:long ;\\n    ] ;\\n  sh:property [\\n        sh:path cx: ;\\n        sh:class SupplierParts ;\\n    ] ;\\n\\nSupplierParts rdf:type sh:NodeShape ;\\n  sh:targetClass cx:Part ;\\n  sh:property [\\n        sh:path cx:isProducedBy ;\\n        sh:hasValue <bpn:legal:BPNL00000003B2OM> ;\\n    ] ;\\n\",\n      \"cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:ntier:TraceabilityAsPlanned\",\n      \"baseUrl\": \"http://oem-provider-agent:8082/sparql\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\",\n      \"authKey\": \"{{oemBackendAuthKey}}\",\n      \"authCode\": \"{{oemBackendAuthCode}}\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{consumerEdcControl}}/data/assets",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"data",
														"assets"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Graph Policy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"urn:cx:Policy:ntier\",\n  \"policy\": {\n      \"permissions\": [\n        {\n        \"action\": {\n            \"type\": \"USE\"\n        },\n        \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/data/policydefinitions",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"data",
														"policydefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill policy."
											},
											"response": []
										},
										{
											"name": "Create Graph Contract Definition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Creation/Existance was successful\", function () {",
															"    pm.expect(pm.response.code).oneOf([204,409]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Api-Key",
														"value": "{{oemEdcApiKey}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\":\"urn_cx_Graph_ntier\",\n  \"accessPolicyId\": \"urn:cx:Policy:ntier\",\n  \"contractPolicyId\": \"urn:cx:Policy:ntier\",\n  \"criteria\": [ {\n      \"operandLeft\": \"asset:prop:contract\",\n      \"operator\":\"=\",\n      \"operandRight\":\"<urn:cx:Graph:ntier>\"\n  }]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{consumerEdcControl}}/data/contractdefinitions",
													"host": [
														"{{consumerEdcControl}}"
													],
													"path": [
														"data",
														"contractdefinitions"
													]
												},
												"description": "Calls the datamanagement API in order to create a skill contract."
											},
											"response": []
										},
										{
											"name": "Register Dataspace Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "SELECT ?connector ?asset \n       ?name\n       (MIN(?adescription) AS ?description) \n       ?type\n       (MAX(?aversion) AS ?version) \n       (GROUP_CONCAT(DISTINCT ?acontentType;SEPARATOR=\",\") AS ?contentType) \n       (CONCAT(\"<\",GROUP_CONCAT(?aontology;SEPARATOR=\">,<\"),\">\") AS ?isDefinedBy) \n       (MIN(?ashape) AS ?shape)\n WHERE { \n     ?connector <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#offersAsset> ?asset. \n     ?asset <https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#contentType> ?acontentType; \n            <https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#name> ?name; \n            <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type; \n            <http://www.w3.org/2000/01/rdf-schema#isDefinedBy> ?aontology; \n            <https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#version> ?aversion; \n            <https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#description> ?adescription.\n\n    OPTIONAL {\n        ?asset <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#shape> ?ashape\n    }\n} GROUP BY ?connector ?asset ?name ?type",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:Dataspace",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:Dataspace"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Lifetime Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX cx-telematics: <https://github.com/catenax-ng/product-knowledge/ontology/telematics.ttl#>\nPREFIX cx-lifetime:   <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\n\n##############################################################################################\n#                  Catena-X Knowledge Agents Sample Federated Skill                          #\n#                         Realizes a 5-Step Business Process                                 #\n#            \"Remaining Useful Life Prognosis based on Diagnosis TroubleCodes\"               #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - DTC Analysis/Resolution (including the READING of PartType and Description)            #\n#   - Serial Part & SUPPLIER Lookup                                                          #\n# - A Contract Offering from SUPPLIER (e.g. ZF) to OEM                                       #\n#   - Telematics data (including the PROPAGATION of LoadSpectrum)                            #\n#   - RUL Prognosis Invocation (including the DISTRIBUTION of RUL results)                   #\n##############################################################################################\n\n####\n# 5. Project the actual output of the Skill on CONSUMER side\n####\nSELECT ?van ?troubleCode ?description ?affectedPart ?distanceKm ?timeDays ?vin WHERE {\n\n    ####\n    # 1. The CONSUMER detects a trouble code on a car in his fleet\n    ####\n    VALUES (?vin ?troubleCode) { (\"@vin\"^^xsd:string \"@troubleCode\"^^xsd:string) }.\n    \n     ####\n    # 2. The CONSUMER looks up the OEM (connector) associated to the VIN \n    #    using the Federated Data Catalogue  (Catalogue=Default Graph)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\n    ?diagnoseAsset rdf:type <{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>;\n                   rdfs:isDefinedBy <{{cxOntologyRoot}}/diagnosis_ontology.ttl>.\n\n    ####\n    # 3. The CONSUMER delegates the following logic to the OEM (connector)\n    ####\n    SERVICE ?oemConnector { \n\n        ####\n        # 3.1 The OEM (e.g. BMW) anomyzes the VIN into an anomymous (VAN) node\n        #.    and gets some master data with it \n        ####\n        ?van cx:isAnonymousVehicle ?vin;\n             cx:hasRegistration ?registration.\n\n        ####\n        # 3.2 The OEM analyzes the DTC-affected part type (Diagnosis Graph)\n        ####\n        GRAPH ?diagnoseAsset {\n\n           ?Dtc rdf:type cx-diag:DTC; \n                cx-diag:Code ?troubleCode;\n                cx-diag:affects [ cx-diag:EnDenomination ?partType ]; \n                cx-diag:Description ?description.\n        \n        } # OEM#Diagnosis context\n\n        ####\n        # 3.3 The OEM obtains fresh telematics/load-spectrum data for the vehicle\n        #     focussed to the problematic partType (Telematics Graph) \n        ####\n        ?van cx-telematics:latestMileageReceived ?mileage;\n             cx-telematics:latestDetailReceived ?telematicsDetail.\n        ?telematicsDetail cx-diag:hasPartType ?partType;\n                          cx-diag:hasLoadSpectrum ?loadSpectrum.\n\n        ####\n        # 3.4 The OEM looks up the serialized part of the VAN (Traceability Graph)\n        #     and the supplier address in the dataspace\n        ####\n        ?serializedPart cx:isComponentOf+ ?van;\n                        cx:hasPartType ?partType;\n                        cx:hasName ?affectedPart;\n                        cx:hasSupplier [\n                            cx:hasConnector ?tieraConnector\n                        ].           \n\n        ?tieraConnector cx:offersAsset ?prognosisAsset.\n        ?prognosisAsset rdfs:isDefinedBy <{{cxOntologyRoot}}/prognosis_ontology.ttl>.\n\n        ####\n        # 4. The OEM (and not the CONSUMER) delegates to the SUPPLIER (connector)\n        #    which means that load spectrum data etc is only exchanged using their\n        #    contract and between their connectors.\n        ####\n        SERVICE ?tieraConnector { \n\n            ####\n            # 4.1 The SUPPLIER adds additional measurement information\n            ####\n            ?telematicsDetail cx-telematics:hasFile ?loadSpectrumFile;\n                              cx-telematics:hasHeader ?loadSpectrumHeader.\n\n            ####\n            # 4.2 The SUPPLIER invokes a prognosis model associated the part type using the load-spectrum data\n            ####\n            GRAPH ?prognosisAsset {\n\n                ?invocation rdf:type cx-lifetime:LifetimePrognosis;\n                    \n                    # <--General vehicle info\n                    cx-lifetime:loadCollectiveMileage ?mileage;\n                    cx-lifetime:loadCollectiveRegistrationDate ?registration;\n\n                    # <--Part Info from the OEM\n                    cx-lifetime:loadCollectiveComponent ?affectedPart;\n                    cx-lifetime:loadCollectiveBody ?loadSpectrum;\n                    \n                    # <--Additional info from the SUPPLIER\n                    cx-lifetime:loadCollectiveFile ?loadSpectrumFile;\n                    cx-lifetime:loadCollectiveHeader ?loadSpectrumHeader; \n                    \n                    # -->the actual prognosis output\n                    cx-lifetime:remainingDistance ?distanceKm; \n                    cx-lifetime:remainingTime ?timeDays.\n            \n            } # SUPPLIER#Prognosis context\n        \n        } # SUPPLIER context\n\n    } # OEM context\n\n   # now we do reporting/operationalising on the CONSUMER side\n} ORDER BY ?remainingDistance LIMIT 5",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:Lifetime",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:Lifetime"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Non-DS Lifetime Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX cx-telematics: <https://github.com/catenax-ng/product-knowledge/ontology/telematics.ttl#>\nPREFIX cx-lifetime:   <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\n\n##############################################################################################\n#                  Catena-X Knowledge Agents Sample Federated Skill                          #\n#                         Realizes a 5-Step Business Process                                 #\n#            \"Remaining Useful Life Prognosis based on Diagnosis TroubleCodes\"               #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - DTC Analysis/Resolution (including the READING of PartType and Description)            #\n#   - Serial Part & SUPPLIER Lookup                                                          #\n# - A Contract Offering from SUPPLIER (e.g. ZF) to OEM                                       #\n#   - Telematics data (including the PROPAGATION of LoadSpectrum)                            #\n#   - RUL Prognosis Invocation (including the DISTRIBUTION of RUL results)                   #\n##############################################################################################\n\n####\n# 5. Project the actual output of the Skill on CONSUMER side\n####\nSELECT ?van ?troubleCode ?affectedAssembly ?problem ?kmLeft ?daysLeft ?vin WHERE {\n\n    ####\n    # 1. The CONSUMER detects a trouble code on a car in his fleet\n    ####\n    VALUES (?vin ?troubleCode) { (\"@vin\"^^xsd:string \"@troubleCode\"^^xsd:string) }.\n    \n     ####\n    # 2. The CONSUMER looks up the OEM (connector) associated to the VIN \n    #    using the Federated Data Catalogue  (Catalogue=Default Graph)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n\n    #?oemConnector cx:offersAsset ?diagnoseAsset.\n    #?diagnoseAsset rdf:type <{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>;\n    #               rdfs:isDefinedBy <{{cxOntologyRoot}}/diagnosis_ontology.ttl>.\n\n    ####\n    # 3. The CONSUMER delegates the following logic to the OEM (connector)\n    ####\n    #SERVICE ?oemConnector { \n\n        ####\n        # 3.1 The OEM (e.g. BMW) anomyzes the VIN into an anomymous (VAN) node\n        #.    and gets some master data with it \n        ####\n        ?van cx:isAnonymousVehicle ?vin;\n             cx:hasRegistration ?registration.\n\n        ####\n        # 3.2 The OEM analyzes the DTC-affected part type (Diagnosis Graph)\n        ####\n        SERVICE <{{oemProviderAgent}}/sparql> {\n\n           ?Dtc rdf:type cx-diag:DTC; \n                cx-diag:Code ?troubleCode;\n                cx-diag:affects [ cx-diag:EnDenomination ?partType ]; \n                cx-diag:Description ?problem.\n        \n        } # OEM#Diagnosis context\n\n        ####\n        # 3.3 The OEM obtains fresh telematics/load-spectrum data for the vehicle\n        #     focussed to the problematic partType (Telematics Graph) \n        ####\n        ?van cx-telematics:latestMileageReceived ?mileage;\n             cx-telematics:latestDetailReceived ?telematicsDetail.\n        ?telematicsDetail cx-diag:hasPartType ?partType;\n                          cx-diag:hasLoadSpectrum ?loadSpectrum.\n\n        ####\n        # 3.4 The OEM looks up the serialized part of the VAN (Traceability Graph)\n        #     and the supplier address in the dataspace\n        ####\n        ?serializedPart cx:isComponentOf+ ?van;\n                        cx:hasPartType ?partType;\n                        cx:hasName ?affectedAssembly;\n                        cx:hasSupplier [\n                            cx:hasConnector ?tieraConnector\n                        ].           \n\n        #?tieraConnector cx:offersAsset ?prognosisAsset.\n        #?prognosisAsset rdfs:isDefinedBy <{{cxOntologyRoot}}/prognosis_ontology.ttl>.\n\n        ####\n        # 4. The OEM (and not the CONSUMER) delegates to the SUPPLIER (connector)\n        #    which means that load spectrum data etc is only exchanged using their\n        #    contract and between their connectors.\n        ####\n        #SERVICE ?tieraConnector { \n\n            ####\n            # 4.1 The SUPPLIER adds additional measurement information\n            ####\n            ?telematicsDetail cx-telematics:hasFile ?loadSpectrumFile;\n                              cx-telematics:hasHeader ?loadSpectrumHeader.\n\n            ####\n            # 4.2 The SUPPLIER invokes a prognosis model associated the part type using the load-spectrum data\n            ####\n            SERVICE <{{tierARemotingAgent}}/repositories/prognosis> {\n\n                ?invocation rdf:type cx-lifetime:LifetimePrognosis;\n                    \n                    # <--General vehicle info\n                    cx-lifetime:loadCollectiveMileage ?mileage;\n                    cx-lifetime:loadCollectiveRegistrationDate ?registration;\n\n                    # <--Part Info from the OEM\n                    cx-lifetime:loadCollectiveComponent ?affectedAssembly;\n                    cx-lifetime:loadCollectiveBody ?loadSpectrum;\n                    \n                    # <--Additional info from the SUPPLIER\n                    cx-lifetime:loadCollectiveFile ?loadSpectrumFile;\n                    cx-lifetime:loadCollectiveHeader ?loadSpectrumHeader; \n                    \n                    # -->the actual prognosis output\n                    cx-lifetime:remainingDistance ?kmLeft; \n                    cx-lifetime:remainingTime ?daysLeft.\n            \n            } # SUPPLIER#Prognosis context\n        \n        #} # SUPPLIER context\n\n    #} # OEM context\n\n   # now we do reporting/operationalising on the CONSUMER side\n} ORDER BY ?remainingDistance LIMIT 5",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:Lifetime",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:Lifetime"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Beer Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\n\n##############################################################################################\n#                  Catena-X Knowledge Agents Sample Skill.                                   #\n##############################################################################################\n\nSELECT ?neg ?preposition ?pronoun ?adj ?object WHERE {\n\n    BIND(\"Not\"^^xsd:string as ?neg).\n    BIND(\"in\"^^xsd:string as ?preposition).\n    BIND(\"your\"^^xsd:string as ?pronoun).\n    BIND(\"wildest\"^^xsd:string as ?adj).\n    BIND(\"dreams!\"^^xsd:string as ?object).\n    \n} ",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:BeerSearch",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:BeerSearch"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Troublecode Search Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#>\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\n\n##############################################################################################\n#              Catena-X Knowledge Agents Sample Federated Search Skill                       #\n#                     Implements Trouble-Code Search based on VINs                           #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - DTC Analysis/Resolution (including the READING of Version and Description)             #\n##############################################################################################\n\nSELECT ?problemArea ?vin ?codeNumber ?description ?version WHERE {\n\n    ####\n    # Three parameters to the custom search\n    ####\n    VALUES (?vin ?problemArea ?minVersion) {(\"@vin\"^^xsd:string \"@problemArea\"^^xsd:string \"@minVersion\"^^xsd:long)}\n\n    ####\n    # Lookup the responsible OEM(s)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\n    ?diagnoseAsset rdf:type <{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>;\n                   rdfs:isDefinedBy <{{cxOntologyRoot}}/diagnosis_ontology.ttl>.\n\n    ####\n    # Delegate to the revelant connector(s) and asset(s)\n    ####\n    #SERVICE <{{oemProviderAgent}}/sparql> {\n    SERVICE ?oemConnector {\n        GRAPH ?diagnoseAsset {\n\n            ?Dtc rdf:type cx-diag:DTC;\n                 cx-diag:Code ?codeNumber;\n                 cx-diag:Description ?description;\n                 cx-diag:Version ?version.\n\n            FILTER ( CONTAINS(?description, ?problemArea) && ?version >= ?minVersion)\n       \n        } # Graph Asset\n    } # Remote Connector\n} # Search",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:TroubleCodeSearch",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:TroubleCodeSearch"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Material Incident Search Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \n\n######\n# Sample \"Material Incident\" Search Skill \n# An incident has\n# - a description of the target material\n# - a geographical region (as a spatial segment)\n# The skill produces\n# - incident site(s) and source part(s)\n# - affected product(s) and organization(s)\n# - (m)bom trace(s) from source to product \n######\n\nSELECT ?incidentSite ?problemPart ?problemPartName ?product ?productName ?vendor ?lat ?lon  ?part3 ?part4 ?site2 ?site3 ?site4 ?site5 ?lat2 ?lon2 ?lat3 ?lon3 ?lat4 ?lon4 ?lat5 ?lon5 ?partName ?part WHERE {\n\n  VALUES (?material ?latmin ?latmax ?lonmin ?lonmax) { \n      (\"@material\"^^xsd:string \"@latmin\"^^xsd:double \"@latmax\"^^xsd:double \"@lonmin\"^^xsd:double \"@lonmax\"^^xsd:double) \n  }\n\n  ## Look for production sites in the region\n  ## using the BPNM/Golden Record Catalogue\n  ?incidentSite cx:hasGeoInformation [\n      cx:hasLatitude ?lat;\n      cx:hasLongitude ?lon\n  ].\n  FILTER( ?lat >=  ?latmin && ?lat <= ?latmax &&\n          ?lon >=  ?lonmin && ?lon <= ?lonmax)\n  \n  ## Find the connector address of the responsible\n  ## businesspartner/orga from the federated data catalogue \n  ?incidentOrga cx:hasSite ?incidentSite;\n        cx:hasConnector ?connectorUrl.\n        \n  SERVICE ?connectorUrl {\n\n      ## Is there a product which has the incident \"material\"\n      ## workaround: use the part name\n       ?part rdf:type cx:Part;\n         cx:partName ?partName;\n         cx:isProducedBy ?incidentSite.\n       FILTER( CONTAINS(?partName, ?material)).\n\n      ?part cx:isPartOf ?problemPart.\n      ?problemPart cx:partName ?problemPartName;\n             cx:isProducedBy ?site2.\n  \n      OPTIONAL {\n          ?problemPart cx:isPartOf ?part3.\n          ?part3 cx:partName ?part3Name;\n                 cx:isProducedBy ?site3.\n      }\n\n     OPTIONAL {\n          ?part3 cx:isPartOf ?part4.\n          ?part4 cx:partName ?part4Name;\n                 cx:isProducedBy ?site4.\n     }\n\n      OPTIONAL {\n          ?part4 cx:isPartOf ?part5.\n          ?part5 cx:partName ?part5Name;\n                   cx:isProducedBy ?site5.\n     }\n  }\n\n  BIND(COALESCE(?part5,?part4,?part3,?problemPart) as ?product)\n  BIND(COALESCE(?part5Name,?part4Name,?part3Name,?problemPartName) as ?productName)\n  BIND(COALESCE(?site5,?site4,?site3,?site2) as ?productSite)\n\n  ?vendor cx:hasSite ?productSite.\n\n  OPTIONAL {\n      ?site2 cx:hasGeoInformation [\n      cx:hasLatitude ?lat2;\n      cx:hasLongitude ?lon2\n    ].\n  }\n  \n  OPTIONAL {\n   ?site3 cx:hasGeoInformation [\n      cx:hasLatitude ?lat3;\n      cx:hasLongitude ?lon3\n   ].\n  }\n\n  OPTIONAL {\n    ?site4 cx:hasGeoInformation [\n      cx:hasLatitude ?lat4;\n      cx:hasLongitude ?lon4\n    ].\n  }\n  \n  OPTIONAL {\n    ?productSite cx:hasGeoInformation [\n      cx:hasLatitude ?lat5;\n      cx:hasLongitude ?lon5\n    ].\n  }\n} \n",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:MaterialIncidentSearch",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:MaterialIncidentSearch"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Material Site Trace Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX bpns: <bpn:site:>\n\n######\n# Sample \"Material Site\" Trace Skill \n# An trace incident has\n# - a description of the target material\n# - a bpns number\n# The skill produces\n# - source part(s)\n# - affected product(s) and organization(s)\n# - (m)bom trace(s) from source to product \n######\n\nSELECT ?site ?part ?partName ?vendor ?product ?productName ?part2 ?part3 ?part4 ?site2 ?site3 ?site4 ?site5 WHERE {\n\n  VALUES (?material ?site) { \n      (\"@material\"^^xsd:string bpns:@site) \n  }\n  \n  ## Find the connector address of the responsible\n  ## businesspartner/orga from the federated data catalogue \n  ?incidentOrga cx:hasSite ?site;\n        cx:hasConnector ?connectorUrl.\n        \n  SERVICE ?connectorUrl {\n\n      ## Is there a product which has the incident \"material\"\n      ## workaround: use the part name\n       ?part rdf:type cx:Part;\n         cx:partName ?partName;\n         cx:isProducedBy ?site.\n       FILTER( CONTAINS(?partName, ?material)).\n\n      ?part cx:isPartOf ?part2.\n      ?part2 cx:partName ?part2Name;\n             cx:isProducedBy ?site2.\n  \n      OPTIONAL {\n          ?part2 cx:isPartOf ?part3.\n          ?part3 cx:partName ?part3Name;\n                 cx:isProducedBy ?site3.\n      }\n\n     OPTIONAL {\n          ?part3 cx:isPartOf ?part4.\n          ?part4 cx:partName ?part4Name;\n                 cx:isProducedBy ?site4.\n     }\n\n      OPTIONAL {\n          ?part4 cx:isPartOf ?product.\n          ?product cx:partName ?productName;\n                   cx:isProducedBy ?site5.\n     }\n  }\n\n  ?vendor cx:hasSite ?site5.\n} \n",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:MaterialSiteTrace",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:MaterialSiteTrace"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Site Trace Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX bpns: <bpn:site:>\n\n######\n# Sample \"Site\" Trace Skill \n# An trace incident has\n# - a bpns number\n# The skill produces\n# - source part(s)\n# - affected product(s) and organization(s)\n# - (m)bom trace(s) from source to product \n######\n\nSELECT ?site ?part ?partName ?vendor ?product ?productName ?part2 ?part3 ?part4 ?site2 ?site3 ?site4 ?site5 WHERE {\n\n  VALUES (?site) { \n      (bpns:@site) \n  }\n  \n  ## Find the connector address of the responsible\n  ## businesspartner/orga from the federated data catalogue \n  ?incidentOrga cx:hasSite ?site;\n        cx:hasConnector ?connectorUrl.\n        \n  SERVICE ?connectorUrl {\n\n      ## Is there a product which has the incident \"material\"\n      ## workaround: use the part name\n       ?part rdf:type cx:Part;\n         cx:partName ?partName;\n         cx:isProducedBy ?site.\n       \n      ?part cx:isPartOf ?part2.\n      ?part2 cx:partName ?part2Name;\n             cx:isProducedBy ?site2.\n  \n      OPTIONAL {\n          ?part2 cx:isPartOf ?part3.\n          ?part3 cx:partName ?part3Name;\n                 cx:isProducedBy ?site3.\n      }\n\n     OPTIONAL {\n          ?part3 cx:isPartOf ?part4.\n          ?part4 cx:partName ?part4Name;\n                 cx:isProducedBy ?site4.\n     }\n\n      OPTIONAL {\n          ?part4 cx:isPartOf ?product.\n          ?product cx:partName ?productName;\n                   cx:isProducedBy ?site5.\n     }\n  }\n\n  ?vendor cx:hasSite ?site5.\n} \n",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:SiteTrace",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:SiteTrace"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										},
										{
											"name": "Register Material Taxonomy Skill",
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/sparql-query"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX skos: <http://www.w3.org/2004/02/skos/core#> \n\nSELECT ?material ?materialName ?isLeaf WHERE {\n    VALUES (?parentMaterial ?lang) { \n        (<@parentMaterial> \"@lang\"^^xsd:string) \n    }\n    OPTIONAL {\n        ?material rdfs:subClassOf ?parentMaterial.\n        BIND(\"false\"^^xsd:boolean AS ?isLeaf).\n    }\n    OPTIONAL {\n        ?material rdf:type ?parentMaterial.         \n        BIND(\"true\"^^xsd:boolean AS ?isLeaf).\n    }\n\n    ?material skos:prefLabel ?materialName.\n    FILTER langMatches( lang(?materialName), ?lang )\n}",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:MaterialTaxonomy",
													"host": [
														"{{consumerAgentPlane}}"
													],
													"path": [
														"api",
														"agent",
														"skill"
													],
													"query": [
														{
															"key": "asset",
															"value": "urn:cx:Skill:consumer:MaterialTaxonomy"
														}
													]
												},
												"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
											},
											"response": []
										}
									]
								},
								{
									"name": "Check Probe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check was successful\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json()).to.have.property(\"isSystemHealthy\",true);",
													"    pm.expect(pm.response.json()).to.have.property(\"componentResults\");",
													"    pm.expect(pm.response.json().componentResults).to.have.length.greaterThan(0);",
													"    pm.response.json().componentResults.map( function(component) {",
													"        pm.expect(component).to.have.property(\"isHealthy\",true);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consumerEdcApi}}/api/check/:stage",
											"host": [
												"{{consumerEdcApi}}"
											],
											"path": [
												"api",
												"check",
												":stage"
											],
											"variable": [
												{
													"key": "stage",
													"value": "startup",
													"description": "You may choose startup, readiness or liveness"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Skill Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											}
										],
										"url": {
											"raw": "{{consumerEdcControl}}/data/assets/:asset",
											"host": [
												"{{consumerEdcControl}}"
											],
											"path": [
												"data",
												"assets",
												":asset"
											],
											"variable": [
												{
													"key": "asset",
													"value": "urn:cx:Graph:consumer:TraceabilityAsPlanned"
												}
											]
										},
										"description": "Calls the datamanagement API in order to create a skill asset."
									},
									"response": []
								},
								{
									"name": "List Assets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(asset) {",
													"        pm.expect(asset).to.have.property(\"properties\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:id\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:name\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:contenttype\");",
													"        var contenttypes=asset.properties[\"asset:prop:contenttype\"].split(\",\").map(function(type) { return type.trim();});",
													"        contenttypes.map(function(contenttype) {",
													"            var contenttypespec=contenttype.split(\";\");",
													"            pm.expect(contenttypespec[0]).oneOf([\"application/json\",\"application/xml\",\"application/cx-skill\"]);",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consumerEdcControl}}/data/assets",
											"host": [
												"{{consumerEdcControl}}"
											],
											"path": [
												"data",
												"assets"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the assets."
									},
									"response": []
								},
								{
									"name": "List Policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(policy) {",
													"        pm.expect(policy).to.have.property(\"uid\");",
													"        pm.expect(policy).to.have.property(\"permissions\");",
													"        pm.expect(policy.permissions).to.have.length.gte(0);",
													"        policy.permissions.map(function(permission) {",
													"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
													"            pm.expect(permission).to.have.property(\"target\");",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consumerEdcControl}}/data/policydefinitions",
											"host": [
												"{{consumerEdcControl}}"
											],
											"path": [
												"data",
												"policydefinitions"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the policies."
									},
									"response": []
								},
								{
									"name": "Show Catalogue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Catalogue listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"id\");",
													"    pm.expect(pm.response.json()).to.have.property(\"contractOffers\");",
													"    pm.expect(pm.response.json().contractOffers).to.have.length.gte(0);",
													"    pm.response.json().contractOffers.map(function(contractOffer) {",
													"        pm.expect(contractOffer).to.have.property(\"id\");",
													"        pm.expect(contractOffer).to.have.property(\"policy\");",
													"        pm.expect(contractOffer).to.have.property(\"asset\");",
													"        pm.expect(contractOffer.asset).to.have.property(\"properties\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:id\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:name\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:contenttype\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consumerEdcControl}}/data/catalog?providerUrl={{consumerEdcIds}}/api/v1/ids/data",
											"host": [
												"{{consumerEdcControl}}"
											],
											"path": [
												"data",
												"catalog"
											],
											"query": [
												{
													"key": "providerUrl",
													"value": "{{oemEdcIds}}/api/v1/ids/data",
													"disabled": true
												},
												{
													"key": "providerUrl",
													"value": "{{tieraEdcIds}}/api/v1/ids/data",
													"disabled": true
												},
												{
													"key": "providerUrl",
													"value": "{{consumerEdcIds}}/api/v1/ids/data"
												}
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
									},
									"response": []
								},
								{
									"name": "Perform a Consumer-Local SparQL",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/sparql-results+json",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Accept",
												"value": "application/sparql-results+xml",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} LIMIT 10",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} LIMIT 10"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Perform a Dataspace Query",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT ?connector ?id ?name ?description ?type ?version ?contentType WHERE { ?connector <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. ?asset <https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl%23contentType> ?contentType; <http://www.w3.org/1999/02/22-rdf-syntax-ns%23type> ?type; <https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl%23version> ?version; <https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl%23description> ?description.}",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?connector ?id ?name ?description ?type ?version ?contentType WHERE { ?connector <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#offersAsset> ?asset. ?asset <https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#contentType> ?contentType; <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type; <https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#version> ?version; <https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#description> ?description.}",
													"description": "A local query"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Perform a Remote SparQL over the Dataspace",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} LIMIT 100&asset={{oemEdcControl}}%23urn:cx:Graph:oem:Diagnosis2022",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} LIMIT 100"
												},
												{
													"key": "asset",
													"value": "http://oem-control-plane:8282%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcControl}}%23urn:cx:Graph:oem:Diagnosis2022"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Post Dataspace Query",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?connector ?asset \n       ?name\n       (MIN(?adescription) AS ?description) \n       ?type\n       (MAX(?aversion) AS ?version) \n       (GROUP_CONCAT(DISTINCT ?acontentType;SEPARATOR=\",\") AS ?contentType) \n       (CONCAT(\"<\",GROUP_CONCAT(?aontology;SEPARATOR=\">,<\"),\">\") AS ?isDefinedBy) \n       (MIN(?ashape) AS ?shape)\n WHERE { \n     ?connector <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#offersAsset> ?asset. \n     ?asset <https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#contentType> ?acontentType; \n            <https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#name> ?name; \n            <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type; \n            <https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#version> ?aversion; \n            <https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#description> ?adescription.\n\n    OPTIONAL {\n        ?asset <http://www.w3.org/2000/01/rdf-schema#isDefinedBy> ?aontology; \n               <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#shape> ?ashape\n    }\n} GROUP BY ?connector ?asset ?name ?type"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "http://oem-control-plane:8282%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "{{oemEdcControl}}%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Post Remote SparQL (Data)",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#>\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\n\n##############################################################################################\n#              Catena-X Knowledge Agents Sample Federated Search Skill                       #\n#                     Implements Trouble-Code Search based on VINs                           #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - DTC Analysis/Resolution (including the READING of Version and Description)             #\n##############################################################################################\n\nSELECT ?problemArea ?vin ?codeNumber ?description ?version WHERE {\n\n    ####\n    # Three parameters to the custom search\n    ####\n    VALUES (?vin ?problemArea ?minVersion) {(\"WBAAL31029PZ00001\"^^xsd:string \"Getriebe\"^^xsd:string \"0\"^^xsd:long)}\n\n    ####\n    # Lookup the responsible OEM(s)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n    #?oemConnector cx:offersAsset ?diagnoseAsset.\n    #?diagnoseAsset rdf:type <{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>;\n    #               rdfs:isDefinedBy <{{cxOntologyRoot}}/diagnosis_ontology.ttl>.\n\n    ####\n    # Delegate to the revelant connector(s) and asset(s)\n    ####\n    SERVICE ?oemConnector {\n        GRAPH <urn:cx:Graph:oem:Diagnosis2022> {\n\n            ?Dtc rdf:type cx-diag:DTC;\n                 cx-diag:Code ?codeNumber;\n                 cx-diag:Description ?description;\n                 cx-diag:Version ?version.\n\n            FILTER ( CONTAINS(?description, ?problemArea) && ?version >= ?minVersion)\n       \n        } # Graph Asset\n    } # Remote Connector\n} # Search"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "http://oem-control-plane:8282%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Post Remote SparQL (Function)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-lifetime: <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\n\nSELECT ?invocation ?distance ?time\nWHERE { \n    GRAPH <urn:cx:Graph:tierA:LifetimeGearbox> {\n        ?invocation a cx-lifetime:LifetimePrognosis;\n              cx-lifetime:loadCollectiveFile \"{  \\\"Type\\\": \\\"ZF_load_collective\\\", \\\"Version\\\": \\\"1.7\\\"  }\"^^json:Object; \n              cx-lifetime:loadCollectiveHeader \"{  \\\"CountingMethod\\\": \\\"ZF_TimeAtLevel\\\",    \\\"CountingUnit\\\": \\\"s\\\",    \\\"Channels\\\": [      {        \\\"Name\\\": \\\"Temp_Oil\\\",        \\\"Type\\\": \\\"Load\\\",        \\\"Unit\\\": \\\"degC\\\",        \\\"LowerLimit\\\": -40,        \\\"UpperLimit\\\": 220,        \\\"NumberOfBins\\\": 52      }  ]  }\"^^json:Object; \n              cx-lifetime:loadCollectiveBody \"{     \\\"Temp_Oil-class\\\": [1, 3, 4, 5, 7, 8, 12, 13, 17, 18, 20, 22, 23, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 47, 48, 49, 50, 51],  \\\"Counts\\\": [7.234E+01, 2.345E+02, 6.654E+02, 5.983E+01, 4.321E+02, 3.876E+02, 5.567E+01, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+02, 6.098E+02, 7.432E+02, 8.873E+02, 4.738E+01, 6.927E+01, 1.234E+02, 2.345E+02, 3.654E+02, 2.983E+01, 4.321E+01, 3.876E+02, 5.567E+02, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+01, 6.098E+01, 3.432E+02, 1.873E+02, 4.738E+02, 6.927E+02] }\"^^json:Object; \n              cx-lifetime:loadCollectiveComponent \"GearOil\"^^xsd:string; \n              cx-lifetime:loadCollectiveMileage \"{ \\\"Value\\\": 82563, \\\"Unit\\\": \\\"km\\\" }\"^^json:Object; \n              cx-lifetime:loadCollectiveRegistrationDate \"{ \\\"Value\\\": 20171206,  \\\"Unit\\\": \\\"yyyymmdd\\\" }\"^^json:Object; \n              cx-lifetime:remainingDistance ?distance; \n              cx-lifetime:remainingTime ?time.\n    }\n}"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=https://knowledge.dev.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY%23urn:cx:Graph:tierA:LifetimeGearbox",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY%23urn:cx:Graph:tierA:LifetimeGearbox",
													"description": "Dataspace Asset",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "http://tiera-control-plane:8282%23urn:cx:Graph:tierA:LifetimeGearbox",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "https://knowledge.dev.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY%23urn:cx:Graph:tierA:LifetimeGearbox"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Post Remote SparQL (Batch Function)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX cx-health: <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#>\n\nSELECT ?invocation ?healthValues\nWHERE { \n    GRAPH <urn:cx:Graph:tierA:HealthIndicatorGearbox> {\n        ?invocation a cx-health:HealthIndication;\n                      cx-health:requestComponentId <urn:cx:AnonymousSerializedPart#GB4711>;\n                      cx-health:classifiedLoadCollectiveFile \"{  \\\"Type\\\": \\\"ZF_load_collective\\\", \\\"Version\\\": \\\"1.7\\\"  }\"^^json:Object; \n                      cx-health:classifiedLoadCollectiveHeader \"{  \\\"CountingMethod\\\": \\\"ZF_TimeAtLevel\\\",    \\\"CountingUnit\\\": \\\"s\\\",    \\\"Channels\\\": [      {        \\\"Name\\\": \\\"Temp_Oil\\\",        \\\"Type\\\": \\\"Load\\\",        \\\"Unit\\\": \\\"degC\\\",        \\\"LowerLimit\\\": -40,        \\\"UpperLimit\\\": 220,        \\\"NumberOfBins\\\": 52      }  ]  }\"^^json:Object; \n                      cx-health:classifiedLoadCollectiveBody \"{     \\\"Temp_Oil-class\\\": [1, 3, 4, 5, 7, 8, 12, 13, 17, 18, 20, 22, 23, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 47, 48, 49, 50, 51],  \\\"Counts\\\": [7.234E+01, 2.345E+02, 6.654E+02, 5.983E+01, 4.321E+02, 3.876E+02, 5.567E+01, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+02, 6.098E+02, 7.432E+02, 8.873E+02, 4.738E+01, 6.927E+01, 1.234E+02, 2.345E+02, 3.654E+02, 2.983E+01, 4.321E+01, 3.876E+02, 5.567E+02, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+01, 6.098E+01, 3.432E+02, 1.873E+02, 4.738E+02, 6.927E+02] }\"^^json:Object; \n                      cx-health:adaptionValueVersion \"VER_AV_001\"^^xsd:string; \n                      cx-health:adaptionValueTimestamp \"2022-10-12T08:17:18.734Z\"^^xsd:dateTime;\n                      cx-health:adaptionValueMileage \"82563.02\"^^xsd:double; \n                      cx-health:adaptionValueOperatingTime \"45667765\"^^xsd:long;\n                      cx-health:adaptionValueList \"[ 0.543534, 0.543535, 0.543536, 0.543537 ]\"^^json:Object;\n                      cx-health:indicatorVersion ?iversion;\n                      cx-health:responseComponentId ?component;\n                      cx-health:healthIndicatorValues ?healthValues.    \n    }\n}"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=http://tiera-control-plane:8282%23urn:cx:Graph:tierA:HealthIndicatorGearbox",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY%23urn:cx:Graph:tierA:HealthIndicatorGearbox",
													"description": "Dataspace Asset",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "http://tiera-control-plane:8282%23urn:cx:Graph:tierA:HealthIndicatorGearbox"
												},
												{
													"key": "asset",
													"value": "https://knowledge.dev.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY%23urn:cx:Graph:tierA:HealthIndicatorGearbox",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Post Federated SparQL (Shortcut Over Backends)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX cx-telematics: <https://github.com/catenax-ng/product-knowledge/ontology/telematics.ttl#>\nPREFIX cx-lifetime:   <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\n\n##############################################################################################\n#                  Catena-X Knowledge Agents Sample Federated Skill                          #\n#                         Realizes a 5-Step Business Process                                 #\n#            \"Remaining Useful Life Prognosis based on Diagnosis TroubleCodes\"               #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - DTC Analysis/Resolution (including the READING of PartType and Description)            #\n#   - Serial Part & SUPPLIER Lookup                                                          #\n# - A Contract Offering from SUPPLIER (e.g. ZF) to OEM                                       #\n#   - Telematics data (including the PROPAGATION of LoadSpectrum)                            #\n#   - RUL Prognosis Invocation (including the DISTRIBUTION of RUL results)                   #\n##############################################################################################\n\n####\n# 5. Project the actual output of the Skill on CONSUMER side\n####\nSELECT  ?van ?description ?serializedPartName ?distance ?time ?vin ?troubleCode ?telematicsDetail WHERE {\n\n    ####\n    # 1. The CONSUMER detects a trouble code on a car in his fleet\n    ####\n    VALUES (?vin ?troubleCode) { (\"WBAAL31029PZ00001\"^^xsd:string \"P0745\"^^xsd:string) }.\n    \n    ####\n    # 2. The CONSUMER looks up the OEM (connector) associated to the VIN \n    #    using the Federated Data Catalogue  (Catalogue=Default Graph)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\n    ?diagnoseAsset rdf:type <{{cxOntologyRoot}}/cx_ontology.ttl#GraphAsset>;\n                   rdfs:isDefinedBy <{{cxOntologyRoot}}/diagnosis_ontology.ttl>.\n\n    ####\n    # 3. The CONSUMER delegates the following logic to the OEM (connector)\n    ####\n    SERVICE ?oemConnector { \n\n        ####\n        # 3.1 The OEM (e.g. BMW) anomyzes the VIN into an anomymous (VAN) node\n        #.    and gets some master data with it \n        ####\n        ?van cx:isAnonymousVehicle ?vin;\n             cx:hasRegistration ?registration.\n\n        ####\n        # 3.2 The OEM analyzes the DTC-affected part type (Diagnosis Graph)\n        ####\n        GRAPH ?diagnoseAsset {\n\n           ?Dtc rdf:type cx-diag:DTC; \n                cx-diag:Code ?troubleCode;\n                cx-diag:affects [ cx-diag:EnDenomination ?partType ]; \n                cx-diag:Description ?description.\n        \n        } # OEM#Diagnosis context\n\n        ####\n        # 3.3 The OEM obtains fresh telematics/load-spectrum data for the vehicle\n        #     focussed to the problematic partType (Telematics Graph) \n        ####\n        ?van cx-telematics:latestMileageReceived ?mileage;\n             cx-telematics:latestDetailReceived ?telematicsDetail.\n        ?telematicsDetail cx-diag:hasPartType ?partType;\n                          cx-diag:hasLoadSpectrum ?loadSpectrum.\n\n        ####\n        # 3.4 The OEM looks up the serialized part of the VAN (Traceability Graph)\n        #     and the supplier address in the dataspace\n        ####\n        ?serializedPart cx:isComponentOf+ ?van;\n                        cx:hasPartType ?partType;\n                        cx:hasName ?serializedPartName;\n                        cx:hasSupplier [\n                            cx:hasConnector ?tieraConnector\n                        ].           \n\n        ?tieraConnector cx:offersAsset ?prognosisAsset.\n        ?prognosisAsset rdfs:isDefinedBy <{{cxOntologyRoot}}/prognosis_ontology.ttl>.\n\n        ####\n        # 4. The OEM (and not the CONSUMER) delegates to the SUPPLIER (connector)\n        #    which means that load spectrum data etc is only exchanged using their\n        #    contract and between their connectors.\n        ####\n        SERVICE ?tieraConnector { \n\n            ####\n            # 4.1 The SUPPLIER adds additional measurement information\n            ####\n            ?telematicsDetail cx-telematics:hasFile ?loadSpectrumFile;\n                              cx-telematics:hasHeader ?loadSpectrumHeader.\n\n            ####\n            # 4.2 The SUPPLIER invokes a prognosis model associated the part type using the load-spectrum data\n            ####\n            GRAPH ?prognosisAsset {\n\n                ?invocation rdf:type cx-lifetime:LifetimePrognosis;\n                    \n                    # <--General vehicle info\n                    cx-lifetime:loadCollectiveMileage ?mileage;\n                    cx-lifetime:loadCollectiveRegistrationDate ?registration;\n\n                    # <--Part Info from the OEM\n                    cx-lifetime:loadCollectiveComponent ?serializedPartName;\n                    cx-lifetime:loadCollectiveBody ?loadSpectrum;\n                    \n                    # <--Additional info from the SUPPLIER\n                    cx-lifetime:loadCollectiveFile ?loadSpectrumFile;\n                    cx-lifetime:loadCollectiveHeader ?loadSpectrumHeader; \n                    \n                    # -->the actual prognosis output\n                    cx-lifetime:remainingDistance ?distance; \n                    cx-lifetime:remainingTime ?time.\n            \n            } # SUPPLIER#Prognosis context\n        \n        } # SUPPLIER context\n\n    } # OEM context\n\n   # now we do reporting/operationalising on the CONSUMER side\n} ORDER BY ?remainingDistance LIMIT 5\n\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "Post Federated SparQL (over Dataspace)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX cx-telematics: <https://github.com/catenax-ng/product-knowledge/ontology/telematics.ttl#>\nPREFIX cx-lifetime:   <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\n\n##############################################################################################\n#                  Catena-X Knowledge Agents Sample Federated Skill                          #\n#                         Realizes a 5-Step Business Process                                 #\n#            \"Remaining Useful Life Prognosis based on Diagnosis TroubleCodes\"               #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - DTC Analysis/Resolution (including the READING of PartType and Description)            #\n#   - Serial Part & SUPPLIER Lookup                                                          #\n# - A Contract Offering from SUPPLIER (e.g. ZF) to OEM                                       #\n#   - Telematics data (including the PROPAGATION of LoadSpectrum)                            #\n#   - RUL Prognosis Invocation (including the DISTRIBUTION of RUL results)                   #\n##############################################################################################\n\n####\n# 5. Project the actual output of the Skill on CONSUMER side\n####\nSELECT ?vin ?van ?troubleCode ?description ?serializedPartName ?distance ?time WHERE {\n\n    ####\n    # 1. The CONSUMER detects a trouble code on a car in his fleet\n    ####\n    VALUES (?vin ?troubleCode) { (\"WBAAL31029PZ00001\"^^xsd:string \"P0745\"^^xsd:string) }.\n\n    ####\n    # 2. The CONSUMER looks up the OEM (connector) associated to the VIN \n    #    using the Federated Data Catalogue  (Catalogue=Default Graph)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\n    ?diagnoseAsset rdfs:isDefinedBy \"<https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/diagnosis_ontology.ttl>\"^^xsd:string.\n\n    ####\n    # 3. The CONSUMER delegates the following logic to the OEM (connector)\n    ####\n    SERVICE ?oemConnector { \n\n        ####\n        # 3.1 The OEM (e.g. BMW) anomyzes the VIN into an anomymous (VAN) node\n        #.    and gets some master data with it \n        ####\n        ?van cx:isAnonymousVehicle ?vin;\n             cx:hasRegistration ?registration.\n\n        ####\n        # 3.2 The OEM analyzes the DTC-affected part type (Diagnosis Graph)\n        ####\n        GRAPH ?diagnoseAsset {\n\n           ?Dtc rdf:type cx-diag:DTC; \n                cx-diag:Code ?troubleCode;\n                cx-diag:affects [ cx-diag:EnDenomination ?partType ]; \n                cx-diag:Description ?description.\n        \n        } # OEM#Diagnosis context\n\n        ####\n        # 3.3 The OEM obtains fresh telematics/load-spectrum data for the vehicle\n        #     focussed to the problematic partType (Telematics Graph) \n        ####\n        ?van cx-telematics:latestMileageReceived ?mileage;\n             cx-telematics:latestDetailReceived ?telematicsDetail.\n        ?telematicsDetail cx-diag:hasPartType ?partType;\n                          cx-diag:hasLoadSpectrum ?loadSpectrum.\n\n        ####\n        # 3.4 The OEM looks up the serialized part of the VAN (Traceability Graph)\n        #     and the supplier address in the dataspace\n        ####\n        ?serializedPart cx:isComponentOf+ ?van;\n                        cx:hasPartType ?partType;\n                        cx:hasName ?serializedPartName;\n                        cx:hasSupplier [\n                            cx:hasConnector ?tieraConnector\n                        ].           \n\n        ?tieraConnector cx:offersAsset ?prognosisAsset.\n        ?prognosisAsset rdfs:isDefinedBy \"<https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/prognosis_ontology.ttl>\"^^xsd:string.\n\n        ####\n        # 4. The OEM (and not the CONSUMER) delegates to the SUPPLIER (connector)\n        #    which means that load spectrum data etc is only exchanged using their\n        #    contract and between their connectors.\n        ####\n        SERVICE ?tieraConnector { \n\n            ####\n            # 4.1 The SUPPLIER adds additional measurement information\n            ####\n            ?telematicsDetail cx-telematics:hasFile ?loadSpectrumFile;\n                              cx-telematics:hasHeader ?loadSpectrumHeader.\n\n            ####\n            # 4.2 The SUPPLIER invokes a prognosis model associated the part type using the load-spectrum data\n            ####\n            GRAPH ?prognosisAsset {\n\n                ?invocation rdf:type cx-lifetime:LifetimePrognosis;\n                    \n                    # <--General vehicle info\n                    cx-lifetime:loadCollectiveMileage ?mileage;\n                    cx-lifetime:loadCollectiveRegistrationDate ?registration;\n\n                    # <--Part Info from the OEM\n                    cx-lifetime:loadCollectiveComponent ?serializedPartName;\n                    cx-lifetime:loadCollectiveBody ?loadSpectrum;\n                    \n                    # <--Additional info from the SUPPLIER\n                    cx-lifetime:loadCollectiveFile ?loadSpectrumFile;\n                    cx-lifetime:loadCollectiveHeader ?loadSpectrumHeader; \n                    \n                    # -->the actual prognosis output\n                    cx-lifetime:remainingDistance ?distance; \n                    cx-lifetime:remainingTime ?time.\n            \n            } # SUPPLIER#Prognosis context\n        \n        } # SUPPLIER context\n\n    } # OEM context\n\n   # now we do reporting/operationalising on the CONSUMER side\n} ORDER BY ?remainingDistance LIMIT 5\n\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "Post Federated Batch SparQL (over Dataspace)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \nPREFIX json:          <https://json-schema.org/draft/2020-12/schema#>\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX cx-telematics: <https://github.com/catenax-ng/product-knowledge/ontology/telematics.ttl#>\nPREFIX cx-health: <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#>\n\n##############################################################################################\n#                  Catena-X Knowledge Agents Sample Federated Skill                          #\n#                         Realizes a 5-Step Business Process                                 #\n#                            \"Health Indicator Prognosis\"                                    #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - Serial Part & SUPPLIER Lookup                                                          #\n# - A Contract Offering from SUPPLIER (e.g. ZF) to OEM                                       #\n#   - Telematics data (including the PROPAGATION of LoadSpectrum)                            #\n#   - HI Prognosis Invocation (including the DISTRIBUTION of RUL results)                   #\n##############################################################################################\n\n####\n# 5. Project the actual output of the Skill on CONSUMER side\n####\nSELECT ?vin ?van ?indicatorComponentId ?health WHERE {\n\n    ####\n    # 1. The CONSUMER detects a trouble code on a car in his fleet\n    ####\n    VALUES (?vin ?partType) { (\"WBAAL31029PZ00002\"^^xsd:string \"clutch\"^^xsd:string) }.\n\n    ####\n    # 2. The CONSUMER looks up the OEM (connector) associated to the VIN \n    #    using the Federated Data Catalogue  (Catalogue=Default Graph)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\n    ?diagnoseAsset rdfs:isDefinedBy \"<https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/diagnosis_ontology.ttl>\"^^xsd:string.\n\n    ####\n    # 3. The CONSUMER delegates the following logic to the OEM (connector)\n    ####\n    SERVICE ?oemConnector { \n\n        ####\n        # 3.1 The OEM (e.g. BMW) anomyzes the VIN into an anomymous (VAN) node\n        #.    and gets some master data with it \n        ####\n        ?van cx:isAnonymousVehicle ?vin;\n             cx:hasRegistration ?registration.\n        GRAPH ?diagnoseAsset {    \n        } # OEM#Diagnosis context\n\n        ####\n        # 3.2 The OEM obtains fresh telematics/load-spectrum data for the vehicle\n        #     focussed to the problematic partType (Telematics Graph) \n        ####\n        ?van cx-telematics:latestMileage ?mileage;\n             cx-telematics:operatingTime ?operatingTime;\n             cx-telematics:latestDetailReceived ?telematicsDetail.\n\n        ?telematicsDetail cx-diag:hasPartType ?partType;\n                          cx-diag:whenRecorded ?recordedTime;\n                          cx-diag:hasAdaptionValues ?adaptionValues;\n                          cx-diag:hasLoadSpectrum ?loadSpectrum.\n\n        ####\n        # 3.3 The OEM looks up the serialized part of the VAN (Traceability Graph)\n        #     and the supplier address in the dataspace\n        ####\n        ?serializedPart cx:isComponentOf+ ?van;\n                        cx:hasPartType ?partType;\n                        cx:hasSupplier [\n                            cx:hasConnector ?tieraConnector\n                        ].           \n\n        ?tieraConnector cx:offersAsset ?healthAsset.\n        ?healthAsset rdfs:isDefinedBy \"<https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/load_spectrum_ontology.ttl>\"^^xsd:string.\n\n        ####\n        # 4. The OEM (and not the CONSUMER) delegates to the SUPPLIER (connector)\n        #    which means that load spectrum data etc is only exchanged using their\n        #    contract and between their connectors.\n        ####\n        SERVICE ?tieraConnector { \n\n            ####\n            # 4.1 The SUPPLIER adds additional measurement information\n            ####\n            ?telematicsDetail cx-telematics:hasFile ?loadSpectrumFile;\n                              cx-telematics:hasAdaptionVersion ?adaptionVersion;\n                              cx-telematics:hasHeader ?loadSpectrumHeader.\n\n            ####\n            # 4.2 The SUPPLIER invokes a prognosis model associated the part type using the load-spectrum data\n            ####\n            GRAPH ?healthAsset {\n                ?invocation rdf:type cx-health:HealthIndication;\n                                     cx-health:requestComponentId ?serializedPart;\n                                     cx-health:classifiedLoadCollectiveFile ?loadSpectrumFile;\n                                     cx-health:classifiedLoadCollectiveHeader ?loadSpectrumHeader;\n                                     cx-health:classifiedLoadCollectiveBody ?loadSpectrum;\n                                     cx-health:adaptionValueVersion ?adaptionVersion; \n                                     cx-health:adaptionValueTimestamp ?recordedTime;\n                                     cx-health:adaptionValueMileage ?mileage; \n                                     cx-health:adaptionValueOperatingTime ?operatingTime;\n                                     cx-health:adaptionValueList ?adaptionValues;\n                                     cx-health:indicatorVersion ?indicatorVersion;\n                                     cx-health:responseComponentId ?indicatorComponentId;\n                                     cx-health:healthIndicatorValues ?health.\n            \n            } # SUPPLIER#Prognosis context\n        \n        } # SUPPLIER context\n\n    } # OEM context\n\n} \n\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "Post Supply Chain Trace",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX cx-telematics: <https://github.com/catenax-ng/product-knowledge/ontology/telematics.ttl#>\nPREFIX cx-lifetime:   <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\n\nSELECT ?vin ?van ?troubleCode ?oemConnector ?diagnoseAsset WHERE {\n\n    ####\n    # 1. The CONSUMER detects a trouble code on a car in his fleet\n    ####\n    VALUES (?vin ?troubleCode) { (\"@vin\"^^xsd:string \"@troubleCode\"^^xsd:string) }.\n    \n    ####\n    # 2. The CONSUMER looks up the OEM (connector) associated to the VIN \n    #    using the Federated Data Catalogue  (Catalogue=Default Graph)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n\n    SERVICE ?oemConnector {\n        VALUES(?van) { str(?vin) }.\n    }\n\n   # now we do reporting/operationalising on the CONSUMER side\n} \n\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?(vin=WBAAL31029PZ00001)&(vin=WBAAL31029PZ00002)&troubleCode=P0746",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "(vin",
													"value": "WBAAL31029PZ00001)"
												},
												{
													"key": "(vin",
													"value": "WBAAL31029PZ00002)"
												},
												{
													"key": "troubleCode",
													"value": "P0746"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "Show Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:Health",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent",
												"skill"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:Lifetime",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:Health"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill."
									},
									"response": []
								},
								{
									"name": "Execute Dataspace Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/sparql-results+xml",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:Dataspace&()",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:Dataspace"
												},
												{
													"key": "()",
													"value": null
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Execute Lifetime Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:Lifetime&(vin=WBAAL31029PZ00001&troubleCode=P0746&troubleCode=P0745)&(vin=WBAAL31029PZ00002&troubleCode=P0744)&(vin=WBAAL31029PZ00003&troubleCode=P0743)",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:Lifetime"
												},
												{
													"key": "(vin",
													"value": "WBAAL31029PZ00001"
												},
												{
													"key": "troubleCode",
													"value": "P0746"
												},
												{
													"key": "troubleCode",
													"value": "P0745)"
												},
												{
													"key": "(vin",
													"value": "WBAAL31029PZ00002"
												},
												{
													"key": "troubleCode",
													"value": "P0744)"
												},
												{
													"key": "(vin",
													"value": "WBAAL31029PZ00003"
												},
												{
													"key": "troubleCode",
													"value": "P0743)"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Execute Lifetime Skill Post Binding",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": {\n        \"vars\": [\n            \"vin\",\n            \"troubleCode\"\n        ]\n    },\n    \"results\": {\n        \"bindings\": [\n            {\n                \"vin\": {\n                    \"type\": \"literal\",\n                    \"value\": \"WBAAL31029PZ00001\"\n                },\n                \"troubleCode\": {\n                    \"type\": \"literal\",\n                    \"value\": \"P0746\"\n                }\n            },\n            {\n                \"vin\": {\n                    \"type\": \"literal\",\n                    \"value\": \"WBAAL31029PZ00001\"\n                },\n                \"troubleCode\": {\n                    \"type\": \"literal\",\n                    \"value\": \"P0745\"\n                }\n            },\n            {\n                \"vin\": {\n                    \"type\": \"literal\",\n                    \"value\": \"WBAAL31029PZ00002\"\n                },\n                \"troubleCode\": {\n                    \"type\": \"literal\",\n                    \"value\": \"P0744\"\n                }\n            },\n            {\n                \"vin\": {\n                    \"type\": \"literal\",\n                    \"value\": \"WBAAL31029PZ00003\"\n                },\n                \"troubleCode\": {\n                    \"type\": \"literal\",\n                    \"value\": \"P0743\"\n                }\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:Lifetime",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "shit",
													"value": "false",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:Lifetime"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Execute Search Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:TroubleCodeSearch&(vin=WBAAL31029PZ00001&problemArea=Getriebe&minVersion=2)",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:TroubleCodeSearch"
												},
												{
													"key": "(vin",
													"value": "WBAAL31029PZ00001"
												},
												{
													"key": "problemArea",
													"value": "Getriebe"
												},
												{
													"key": "minVersion",
													"value": "2)"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Post Federated Search (over Dataspace)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX xsd:           <http://www.w3.org/2001/XMLSchema#>\nPREFIX rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs:          <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX cx:            <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag:       <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\n\n##############################################################################################\n#              Catena-X Knowledge Agents Sample Federated Search Skill                       #\n#                     Implements Trouble-Code Search based on VINs                           #\n##############################################################################################\n# Preconditions:                                                                             #\n# - A Contract Offering from OEM (e.g. BMW) to CONSUMER (e.g. ADAC)                          #\n#   - VIN-VAN Conversion                                                                     #\n#   - DTC Analysis/Resolution (including the READING of Version and Description)             #\n##############################################################################################\n\nSELECT ?vin ?codeNumber ?description ?version WHERE {\n\n    ####\n    # Three parameters to the custom search\n    ####\n    VALUES (?vin ?problemArea ?minVersion) {(\"WBAAL31029PZ00001\"^^xsd:string \"Getriebe\"^^xsd:string \"1\"^^xsd:long)}\n\n    ####\n    # Lookup the responsible OEM(s)\n    ####\n    ?oem cx:isIssuerOfVehicleIdentificationNumber ?vin;\n         cx:hasConnector ?oemConnector.\n    ?oemConnector cx:offersAsset ?diagnoseAsset.\n    ?diagnoseAsset rdf:type <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#GraphAsset>;\n                   rdfs:isDefinedBy <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/diagnosis_ontology.ttl>.\n\n    ####\n    # Delegate to the revelant connector(s) and asset(s)\n    ####\n    SERVICE ?oemConnector {\n        GRAPH ?diagnoseAsset {\n\n            ####\n            # the actual subselect carrying the FILTERs\n            ####\n\n            ?Dtc rdf:type cx-diag:DTC;\n                 cx-diag:Code ?codeNumber;\n                 cx-diag:Description ?description;\n                 cx-diag:Version ?version.\n\n            FILTER ( CONTAINS(?description, ?problemArea) && ?version >= ?minVersion)\n       \n        } # Graph Asset\n    } # Remote Connector\n} # Search",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?()",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "()",
													"value": null
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Material Incident Search",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \n\n######\n# Sample \"Material Incident\" Search Skill \n# An incident has\n# - a description of the target material\n# - a geographical region (as a spatial segment)\n# The skill produces\n# - incident site(s) and source part(s)\n# - affected product(s) and organization(s)\n# - (m)bom trace(s) from source to product \n######\n\nSELECT ?site ?part ?partName ?vendor ?product ?productName ?lat ?lon ?part2 ?part3 ?part4 ?site2 ?site3 ?site4 ?site5 ?lat2 ?lon2 ?lat3 ?lon3 ?lat4 ?lon4 ?lat5 ?lon5 WHERE {\n\n  VALUES (?material ?latmin ?latmax ?lonmin ?lonmax) { \n      (\"Natural Rubber\"^^xsd:string \"7.5\"^^xsd:double \"8\"^^xsd:double \"98\"^^xsd:double \"98.5\"^^xsd:double) \n  }\n\n  ## Look for production sites in the region\n  ## using the BPNM/Golden Record Catalogue\n  ?site cx:hasGeoInformation [\n      cx:hasLatitude ?lat;\n      cx:hasLongitude ?lon\n  ].\n  FILTER( ?lat >=  ?latmin && ?lat <= ?latmax &&\n          ?lon >=  ?lonmin && ?lon <= ?lonmax)\n  \n  ## Find the connector address of the responsible\n  ## businesspartner/orga from the federated data catalogue \n  ?incidentOrga cx:hasSite ?site;\n        cx:hasConnector ?connectorUrl.\n        \n  SERVICE ?connectorUrl {\n\n      ## Is there a product which has the incident \"material\"\n      ## workaround: use the part name\n       ?part rdf:type cx:Part;\n         cx:partName ?partName;\n         cx:isProducedBy ?site.\n       FILTER( CONTAINS(?partName, ?material)).\n\n      ?part cx:isPartOf ?part2.\n      ?part2 cx:partName ?part2Name;\n             cx:isProducedBy ?site2.\n  \n      OPTIONAL {\n          ?part2 cx:isPartOf ?part3.\n          ?part3 cx:partName ?part3Name;\n                 cx:isProducedBy ?site3.\n      }\n\n     OPTIONAL {\n          ?part3 cx:isPartOf ?part4.\n          ?part4 cx:partName ?part4Name;\n                 cx:isProducedBy ?site4.\n     }\n\n      OPTIONAL {\n          ?part4 cx:isPartOf ?part5.\n          ?part5 cx:partName ?part5Name;\n                 cx:isProducedBy ?site5.\n     }\n  }\n\n  BIND(COALESCE(?part5,?part4,?part3,?part2) as ?product)\n  BIND(COALESCE(?part5Name,?part4Name,?part3Name,?part2Name) as ?productName)\n  BIND(COALESCE(?site5,?site4,?site3,?site2) as ?productSite)\n\n  ?vendor cx:hasSite ?productSite.\n\n  ?site2 cx:hasGeoInformation [\n      cx:hasLatitude ?lat2;\n      cx:hasLongitude ?lon2\n  ].\n\n  ?site3 cx:hasGeoInformation [\n         cx:hasLatitude ?lat3;\n         cx:hasLongitude ?lon3\n  ].\n\n   ?site4 cx:hasGeoInformation [\n          cx:hasLatitude ?lat4;\n          cx:hasLongitude ?lon4\n   ].\n    \n    ?productSite cx:hasGeoInformation [\n                 cx:hasLatitude ?lat5;\n                 cx:hasLongitude ?lon5\n    ].\n  \n} \n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "Post Material Site Trace",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX bpns: <bpn:site:>\n\n######\n# Sample \"Material Site\" Trace Skill \n# An trace incident has\n# - a description of the target material\n# - a bpns number\n# The skill produces\n# - source part(s)\n# - affected product(s) and organization(s)\n# - (m)bom trace(s) from source to product \n######\n\nSELECT ?site ?part ?partName ?vendor ?product ?productName ?part2 ?part3 ?part4 ?site2 ?site3 ?site4 ?site5 WHERE {\n\n  VALUES (?material ?site) { \n      (\"Cathode\"^^xsd:string bpns:BPNS00000003B0Q0) \n  }\n  \n  ## Find the connector address of the responsible\n  ## businesspartner/orga from the federated data catalogue \n  ?incidentOrga cx:hasSite ?site;\n        cx:hasConnector ?connectorUrl.\n        \n  SERVICE ?connectorUrl {\n\n      ## Is there a product which has the incident \"material\"\n      ## workaround: use the part name\n       ?part rdf:type cx:Part;\n         cx:partName ?partName;\n         cx:isProducedBy ?site.\n       FILTER( CONTAINS(?partName, ?material)).\n\n      ?part cx:isPartOf ?part2.\n      ?part2 cx:partName ?part2Name;\n             cx:isProducedBy ?site2.\n  \n      OPTIONAL {\n          ?part2 cx:isPartOf ?part3.\n          ?part3 cx:partName ?part3Name;\n                 cx:isProducedBy ?site3.\n      }\n\n     OPTIONAL {\n          ?part3 cx:isPartOf ?part4.\n          ?part4 cx:partName ?part4Name;\n                 cx:isProducedBy ?site4.\n     }\n\n      OPTIONAL {\n          ?part4 cx:isPartOf ?product.\n          ?product cx:partName ?productName;\n                   cx:isProducedBy ?site5.\n     }\n  }\n\n  ?vendor cx:hasSite ?site5.\n} \n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "Execute Material Incident Search Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "X-Api-Key",
												"value": "bar"
											},
											{
												"key": "Referer",
												"value": "http://localhost:3000/"
											},
											{
												"key": "Origin",
												"value": "http://localhost:3000"
											},
											{
												"key": "Sec-Fetch-Dest",
												"value": "empty"
											},
											{
												"key": "Sec-Fetch-Mode",
												"value": "cors"
											},
											{
												"key": "Sec-Fetch-Site",
												"value": "same-site"
											},
											{
												"key": "Accept-Language",
												"value": "de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:MaterialIncidentSearch&material=Cathode&latmin=12.5&lonmin=13&latmax=74.5&lonmax=75",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:MaterialIncidentSearch"
												},
												{
													"key": "material",
													"value": "Cathode"
												},
												{
													"key": "latmin",
													"value": "12.5"
												},
												{
													"key": "lonmin",
													"value": "13"
												},
												{
													"key": "latmax",
													"value": "74.5"
												},
												{
													"key": "lonmax",
													"value": "75"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Execute Material Incident Search Skill Variant",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:MaterialIncidentSearch&material=Natural Rubber&latmin=7.5&lonmin=98&latmax=8&lonmax=98.5",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:MaterialIncidentSearch"
												},
												{
													"key": "material",
													"value": "Natural Rubber"
												},
												{
													"key": "latmin",
													"value": "7.5"
												},
												{
													"key": "lonmin",
													"value": "98"
												},
												{
													"key": "latmax",
													"value": "8"
												},
												{
													"key": "lonmax",
													"value": "98.5"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Execute Material Site Trace Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:MaterialSiteTrace&material=Cathode&site=BPNS00000003B0Q0",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:MaterialSiteTrace"
												},
												{
													"key": "material",
													"value": "Cathode"
												},
												{
													"key": "site",
													"value": "BPNS00000003B0Q0"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Execute Site Trace Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:SiteTrace&site=BPNS00000003B0Q0",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:SiteTrace"
												},
												{
													"key": "site",
													"value": "BPNS00000003B0Q0"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								},
								{
									"name": "Query Quality Endpoint/Asset Copy",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nselect * where { \n    SERVICE <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> {\n        GRAPH <urn:cx:Graph:oem:Quality> {\n        \tSELECT ?part WHERE {\n  \t\t\t\t?part rdf:type cx:Part\n\t\t\t} \n    \t}\n    }\n} limit 100 \n"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										}
									},
									"response": []
								},
								{
									"name": "Query Material Taxonomy",
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \n\nSELECT ?child ?isInstance WHERE {\n    VALUES (?material) { \n        (cx:EngineeringMaterial) \n    }\n    OPTIONAL {\n        ?child rdfs:subClassOf ?material.\n        BIND(\"false\"^^xsd:boolean AS ?isInstance).\n    }\n    OPTIONAL {\n        ?child rdf:type ?material.\n        BIND(\"true\"^^xsd:boolean AS ?isInstance).\n    }\n}\n"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:MaterialTaxonomy&lang=EN&parentMaterial=https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl%23EngineeringMaterial",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:MaterialTaxonomy"
												},
												{
													"key": "lang",
													"value": "EN"
												},
												{
													"key": "lang",
													"value": "DE",
													"disabled": true
												},
												{
													"key": "parentMaterial",
													"value": "https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl%23EngineeringMaterial"
												},
												{
													"key": "parentMaterial",
													"value": "https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl%23MetalMaterial",
													"disabled": true
												},
												{
													"key": "parentMaterial",
													"value": "https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl%23Alloy",
													"disabled": true
												},
												{
													"key": "parentMaterial",
													"value": "https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl%23CathodeMaterial",
													"disabled": true
												},
												{
													"key": "parentMaterial",
													"value": "https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl%23PolymerMaterial",
													"disabled": true
												},
												{
													"key": "parentMaterial",
													"value": "https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl%23OrganicMaterial",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Query Conforming Agent",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nselect * where { \n    SERVICE <edc://oem-control-plane:8282> {\n        GRAPH <urn:cx:Graph:oem:Conforming> {\n        \tSELECT * WHERE {\n  \t\t\t\t?subject rdf:type ?object\n\t\t\t} \n    \t}\n    }\n} limit 100 \n"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										}
									},
									"response": []
								}
							],
							"description": "A collection of calls agains the (agent-enabled) EDC control and data plane of the consumer tenant."
						}
					],
					"description": "A Collection of API Calls Against the Consuming and Federation Components of the Dataspace.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{oemPassword}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{oemUser}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "A Collection of API Calls Against the Dataspace Components of KA."
		},
		{
			"name": "Integration Tests",
			"item": [
				{
					"name": "00_KA",
					"item": [
						{
							"name": "1.0 Deregister Existing Oem Contract Definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Contract Definition was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{oemEdcControl}}/data/contractdefinitions/:contract",
									"host": [
										"{{oemEdcControl}}"
									],
									"path": [
										"data",
										"contractdefinitions",
										":contract"
									],
									"variable": [
										{
											"key": "contract",
											"value": "oemOffer",
											"description": "Id of the Contract Definition"
										}
									]
								},
								"description": "Calls the datamanagement API in order to create a graph asset."
							},
							"response": []
						},
						{
							"name": "1.1 Deregister Existing Oem Graph Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Data Graph Asset was successful (in case no agreements were pending)\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404,409]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{oemEdcControl}}/data/assets/:asset",
									"host": [
										"{{oemEdcControl}}"
									],
									"path": [
										"data",
										"assets",
										":asset"
									],
									"variable": [
										{
											"key": "asset",
											"value": "urn:cx:Graph:oem:Diagnosis2022",
											"description": "Id of the Asset"
										}
									]
								},
								"description": "Calls the datamanagement API in order to create a graph asset."
							},
							"response": []
						},
						{
							"name": "1.2 Disable Oem Graph Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Oem Policy was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{oemEdcControl}}/data/policydefinitions/:policy",
									"host": [
										"{{oemEdcControl}}"
									],
									"path": [
										"data",
										"policydefinitions",
										":policy"
									],
									"variable": [
										{
											"key": "policy",
											"value": "oemPolicy",
											"description": "Id of the Policy"
										}
									]
								},
								"description": "Calls the datamanagement API in order to create a graph policy."
							},
							"response": []
						},
						{
							"name": "1.3 Check Propagation into Consumer Data Catalogue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){ console.log(\"Wait before catalogue is synchronized.\")}, 60000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contract Offer Deletion was propagated\", function () {",
											"    pm.expect(pm.response.code).oneOf([200]);",
											"    pm.expect(pm.response.json().results.bindings.length).eq(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }",
									"host": [
										"{{consumerAgentPlane}}"
									],
									"path": [
										"api",
										"agent"
									],
									"query": [
										{
											"key": "asset",
											"value": "urn:x-arq:DefaultGraph",
											"description": "the default graph should be compliant",
											"disabled": true
										},
										{
											"key": "query",
											"value": "SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }"
										}
									]
								},
								"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
							},
							"response": []
						},
						{
							"name": "1.5 Register Oem Data Graph Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation of Data Graph Asset was successful (in case no agreements were pending)\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,409]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:oem:Diagnosis2022\",\n      \"asset:prop:name\": \"Diagnostic Trouble Code Catalogue Version 2022\",\n      \"asset:prop:description\": \"A sample graph asset/offering referring to a specific diagnosis resource.\",\n      \"asset:prop:version\": \"0.5.5-SNAPSHOT\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"rdf:type\":\"https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#GraphAsset\",\n      \"rdfs:isDefinedBy\": \"https://github.com/catenax-ng/product-knowledge/ontology/diagnosis_ontology.ttl\",\n      \"cx:protocol\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"cx:shape\": \"@prefix : <urn:cx:Graph:oem:Diagnosis2022> .\\n@prefix cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> .\\n@prefix cx-diag: <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\nOemDTC rdf:type sh:NodeShape ;\\n  sh:targetClass cx-diag:DTC ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#BusinessPartner/BPNL00000003COJN> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx-diag:Version ;\\n        sh:hasValue 0^^xsd:long ;\\n    ] ;\\n  sh:property [\\n        sh:path cx-diag:Affects ;\\n        sh:class OemDiagnosedParts ;\\n    ] ;\\n\\nOemDiagnosedParts rdf:type sh:NodeShape ;\\n  sh:targetClass cx-diag:DiagnosedPart ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#BusinessPartner/BPNL00000003COJN> ;\\n    ] ;\\n\",\n      \"cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:oem:Diagnosis2022\",\n      \"baseUrl\": \"http://oem-provider-agent:8080/sparql\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\",\n      \"authKey\": \"{{oemBackendAuthKey}}\",\n      \"authCode\": \"{{oemBackendAuthCode}}\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{oemEdcControl}}/data/assets",
									"host": [
										"{{oemEdcControl}}"
									],
									"path": [
										"data",
										"assets"
									]
								},
								"description": "Calls the datamanagement API in order to create a graph asset."
							},
							"response": []
						},
						{
							"name": "1.6 Enable Oem Graph Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation of Oem Policy was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"oemPolicy\",\n  \"policy\": {\n    \"target\": \"urn:cx:Graph:oem:.*\",\n    \"permissions\": [\n        {\n            \"target\": \"urn:cx:Graph:oem:Diagnosis.*\",\n            \"action\": {\n                \"type\": \"USE\"\n            },\n            \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{oemEdcControl}}/data/policydefinitions",
									"host": [
										"{{oemEdcControl}}"
									],
									"path": [
										"data",
										"policydefinitions"
									]
								},
								"description": "Calls the datamanagement API in order to create a graph policy."
							},
							"response": []
						},
						{
							"name": "1.7 Register Oem Graph Contract Definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation/Existance was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\":\"oemOffer\",\n  \"accessPolicyId\": \"oemPolicy\",\n  \"contractPolicyId\": \"oemPolicy\",\n  \"criteria\": [ {\n      \"operandLeft\": \"asset:prop:id\",\n      \"operator\":\"~\",\n      \"operandRight\":\"urn:cx:Graph:oem:.*\"\n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{oemEdcControl}}/data/contractdefinitions",
									"host": [
										"{{oemEdcControl}}"
									],
									"path": [
										"data",
										"contractdefinitions"
									]
								},
								"description": "Calls the datamanagement API in order to create a contract."
							},
							"response": []
						},
						{
							"name": "1.8 Check Propagation into Consumer Data Catalogue Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){ console.log(\"Wait before catalogue is synchronized.\")}, 60000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contract Offer was propagated\", function () {",
											"    pm.expect(pm.response.code).oneOf([200]);",
											"    pm.expect(pm.response.json().results.bindings.length).gte(1);",
											"    pm.expect(pm.response.json().results.bindings[0].asset.value).eq(\"urn:cx:Graph:oem:Diagnosis2022\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }",
									"host": [
										"{{consumerAgentPlane}}"
									],
									"path": [
										"api",
										"agent"
									],
									"query": [
										{
											"key": "asset",
											"value": "urn:x-arq:DefaultGraph",
											"description": "the default graph should be compliant",
											"disabled": true
										},
										{
											"key": "query",
											"value": "SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/oem-edc-control/BPNL00000003COJN> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }"
										}
									]
								},
								"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
							},
							"response": []
						},
						{
							"name": "2.0 Deregister Existing Tiera Contract Definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Contract Definition was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{tieraEdcControl}}/data/contractdefinitions/:contract",
									"host": [
										"{{tieraEdcControl}}"
									],
									"path": [
										"data",
										"contractdefinitions",
										":contract"
									],
									"variable": [
										{
											"key": "contract",
											"value": "tierAOffer",
											"description": "Id of the Contract Definition"
										}
									]
								},
								"description": "Calls the datamanagement API in order to create a graph asset."
							},
							"response": []
						},
						{
							"name": "2.1 Deregister Tier1 Function Graph Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Function Graph Asset was successful (or conflicted because of existing agreements).\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404,409]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{tieraEdcControl}}/data/assets/urn:cx:Graph:tierA:LifetimeGearbox",
									"host": [
										"{{tieraEdcControl}}"
									],
									"path": [
										"data",
										"assets",
										"urn:cx:Graph:tierA:LifetimeGearbox"
									]
								},
								"description": "Calls the datamanagement API in order to create a graph asset."
							},
							"response": []
						},
						{
							"name": "2.2 Disable Tier1 Graph Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Tier1 Policy was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{tieraEdcControl}}/data/policydefinitions/:policy",
									"host": [
										"{{tieraEdcControl}}"
									],
									"path": [
										"data",
										"policydefinitions",
										":policy"
									],
									"variable": [
										{
											"key": "policy",
											"value": "tierAPolicy"
										}
									]
								},
								"description": "Calls the datamanagement API in order to create a graph policy."
							},
							"response": []
						},
						{
							"name": "2.3 Check Propagation into Consumer Data Catalogue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){ console.log(\"Wait before catalogue is synchronized.\")}, 60000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contract Offer Deletion was propagated\", function () {",
											"    pm.expect(pm.response.code).oneOf([200]);",
											"    pm.expect(pm.response.json().results.bindings.length).eq(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }",
									"host": [
										"{{consumerAgentPlane}}"
									],
									"path": [
										"api",
										"agent"
									],
									"query": [
										{
											"key": "asset",
											"value": "urn:x-arq:DefaultGraph",
											"description": "the default graph should be compliant",
											"disabled": true
										},
										{
											"key": "query",
											"value": "SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }"
										}
									]
								},
								"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
							},
							"response": []
						},
						{
							"name": "2.5 Register Tier1 Function Graph Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation of Function Graph Asset was successful (or pending because of existing agreements)\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,409]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:tierA:LifetimeGearbox\",\n      \"asset:prop:name\": \"Lifetime Prognosis Service for Gearboxes\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"asset:prop:policy-id\": \"gobang\",\n      \"asset:prop:cx:requesttype\": \"application/sparql\",\n      \"asset:prop:cx:apitype\": \"application/knowledge-agent-query\",\n      \"asset:prop:cx:ontology\": \"https://github.com/catenax-ng/product-knowledge/ontology#\",\n      \"asset:prop:cx:ontologyVersion\": \"https://github.com/catenax-ng/product-knowledge/tree/main\",\n      \"asset:prop:cx:shapesGraph\": \"@prefix : <urn:cx:Graph:tierA:LifetimeGearbox> .\\n@prefix cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> .\\n@prefix cx-lifetime: <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n :Tier1LifetimePrognosis rdf:type sh:NodeShape ;\\n  sh:targetClass cx-lifetime:LifetimePrognosis ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#BusinessPartner/BPNL00000003CPIY> ].\\n\",\n      \"asset:prop:cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"baseUrl\": \"http://tiera-remoting-agent:8081/rdf4j-server/repositories/prognosis\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tieraEdcControl}}/data/assets",
									"host": [
										"{{tieraEdcControl}}"
									],
									"path": [
										"data",
										"assets"
									]
								},
								"description": "Calls the datamanagement API in order to create a graph asset."
							},
							"response": []
						},
						{
							"name": "2.6 EnableTier1 Graph Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation/Existance was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"tierAPolicy\",\n  \"target\": \"urn:cx:Graph:tierA:.*\",\n  \"policy\": {\n      \"permissions\": [\n        {\n        \"target\": \"urn:cx:Graph:tierA:.*\",\n        \"action\": {\n        \"type\": \"USE\"\n        },\n        \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tieraEdcControl}}/data/policydefinitions",
									"host": [
										"{{tieraEdcControl}}"
									],
									"path": [
										"data",
										"policydefinitions"
									]
								},
								"description": "Calls the datamanagement API in order to create a graph policy."
							},
							"response": []
						},
						{
							"name": "2.7 Register Tier1 Graph Contract Definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation/Existance was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\":\"tierAOffer\",\n  \"accessPolicyId\": \"tierAPolicy\",\n  \"contractPolicyId\": \"tierAPolicy\",\n  \"criteria\": [ {\n      \"operandLeft\": \"asset:prop:id\",\n      \"operator\":\"~\",\n      \"operandRight\":\"urn:cx:Graph:tierA:.*\"\n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{tieraEdcControl}}/data/contractdefinitions",
									"host": [
										"{{tieraEdcControl}}"
									],
									"path": [
										"data",
										"contractdefinitions"
									]
								},
								"description": "Calls the datamanagement API in order to create a contract."
							},
							"response": []
						},
						{
							"name": "2.8 Check Propagation into Consumer Data Catalogue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){ console.log(\"Wait before catalogue is synchronized.\")}, 60000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contract Offer was propagated\", function () {",
											"    pm.expect(pm.response.code).oneOf([200]);",
											"    pm.expect(pm.response.json().results.bindings.length).gte(1);",
											"    pm.expect(pm.response.json().results.bindings[0].asset.value).eq(\"urn:cx:Graph:tierA:LifetimeGearbox\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }",
									"host": [
										"{{consumerAgentPlane}}"
									],
									"path": [
										"api",
										"agent"
									],
									"query": [
										{
											"key": "asset",
											"value": "urn:x-arq:DefaultGraph",
											"description": "the default graph should be compliant",
											"disabled": true
										},
										{
											"key": "query",
											"value": "SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/tiera-edc-control/BPNL00000003CPIY> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }"
										}
									]
								},
								"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
							},
							"response": []
						},
						{
							"name": "3.0 Deregister Existing Consumer Contract Definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Contract Definition was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{consumerEdcControl}}/data/contractdefinitions/:contract",
									"host": [
										"{{consumerEdcControl}}"
									],
									"path": [
										"data",
										"contractdefinitions",
										":contract"
									],
									"variable": [
										{
											"key": "contract",
											"value": "consumerOffer",
											"description": "Id of the Contract Definition"
										}
									]
								},
								"description": "Calls the datamanagement API in order to create a graph asset."
							},
							"response": []
						},
						{
							"name": "3.1 Deregister Consumer Skill Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Skill Asset was successful (if not part of an agreement)\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404,409]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{consumerEdcControl}}/data/assets/:asset",
									"host": [
										"{{consumerEdcControl}}"
									],
									"path": [
										"data",
										"assets",
										":asset"
									],
									"variable": [
										{
											"key": "asset",
											"value": "urn:cx:Skill:consumer:LifetimeGearbox"
										}
									]
								},
								"description": "Calls the datamanagement API in order to create a skill asset."
							},
							"response": []
						},
						{
							"name": "3.2 Disable Consumer Skill Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deletion/Non-Existance of Consumer Policy was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,404]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{consumerEdcControl}}/data/policydefinitions/:policy",
									"host": [
										"{{consumerEdcControl}}"
									],
									"path": [
										"data",
										"policydefinitions",
										":policy"
									],
									"variable": [
										{
											"key": "policy",
											"value": "consumerPolicy"
										}
									]
								},
								"description": "Calls the datamanagement API in order to create a skill policy."
							},
							"response": []
						},
						{
							"name": "3.3 Check Propagation into Consumer Data Catalogue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){ console.log(\"Wait before catalogue is synchronized.\")}, 60000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contract Offer Deletion was propagated\", function () {",
											"    pm.expect(pm.response.code).oneOf([200]);",
											"    pm.expect(pm.response.json().results.bindings.length).eq(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/consumer-edc-control/BPNL00000003CQI9> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }",
									"host": [
										"{{consumerAgentPlane}}"
									],
									"path": [
										"api",
										"agent"
									],
									"query": [
										{
											"key": "asset",
											"value": "urn:x-arq:DefaultGraph",
											"description": "the default graph should be compliant",
											"disabled": true
										},
										{
											"key": "query",
											"value": "SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/consumer-edc-control/BPNL00000003CQI9> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }"
										}
									]
								},
								"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
							},
							"response": []
						},
						{
							"name": "3.5 Register Consumer Skill Asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation/Existance was successful (if not blocked by agreement)\", function () {",
											"    pm.expect(pm.response.code).oneOf([204,409]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:consumer:LifetimeGearbox\",\n      \"asset:prop:name\": \"Remaining Useful Lifetime Skill for Vehicles\",\n      \"asset:prop:description\": \"A sample skill asset/offering implemented via SparQL.\",\n      \"asset:prop:version\": \"0.5.5-SNAPSHOT\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"cx:protocol\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"rdf:type\":\"https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#SkillAsset\",\n      \"rdfs:isDefinedBy\": \"https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl\",\n      \"cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:consumer:LifetimeGearbox\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SKILL#SPARQL\",\n      \"query\": \"PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\\nPREFIX cx-diag: <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nSELECT ?reason ?code ?description ?version ?partend ?partcat ?partclass WHERE {\\n  # Select Business Partner\\n  ?Oem cx:BPNL \\\"BPNL00000003COJN\\\".\\n\\n  # Search for Trouble Codes of the Business Partner\\n  # related to a cause in the \\\"Kabelbaum\\\"\\n  ?Dtc rdf:type cx-diag:DTC.\\n  ?Dtc cx:provisionedBy ?Oem.\\n  ?Dtc cx-diag:PossibleCauses ?reason.\\n  FILTER contains(?reason,\\\"Kabelbaum\\\").\\n  ?Dtc cx-diag:Code ?code.\\n  ?Dtc cx-diag:Description ?description.\\n  ?Dtc cx-diag:Version ?version.\\n\\n  # Navigate to the affected parts\\n  # and show only parts with a classification \\\"Powertrain\\\"\\n  ?Dtc cx-diag:affects ?Part.\\n  ?Part cx-diag:Category ?partcat.\\n  ?Part cx-diag:EnDenomination ?partend.\\n  ?Part cx-diag:Classification ?partclass.\\n  FILTER contains(?partclass,'Powertrain').\\n\\n}\\n\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"false\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"false\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{consumerEdcControl}}/data/assets",
									"host": [
										"{{consumerEdcControl}}"
									],
									"path": [
										"data",
										"assets"
									]
								},
								"description": "Calls the datamanagement API in order to create a skill asset."
							},
							"response": []
						},
						{
							"name": "3.6 Enable Consumer Skill Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation of Consumer Policy was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"consumerPolicy\",\n  \"policy\": {\n      \"target\": \"urn:cx:Skill:consumer.*\",\n      \"permissions\": [\n        {\n        \"target\": \"urn:cx:Skill:consumer:Lifetime.*\",\n        \"action\": {\n            \"type\": \"USE\"\n        },\n        \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{consumerEdcControl}}/data/policydefinitions",
									"host": [
										"{{consumerEdcControl}}"
									],
									"path": [
										"data",
										"policydefinitions"
									]
								},
								"description": "Calls the datamanagement API in order to create a skill policy."
							},
							"response": []
						},
						{
							"name": "3.7 Register Tier1 Skill Contract Definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creation/Existance was successful\", function () {",
											"    pm.expect(pm.response.code).oneOf([204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
										"key": "X-Api-Key",
										"value": "{{oemEdcApiKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\":\"consumerOffer\",\n  \"accessPolicyId\": \"consumerPolicy\",\n  \"contractPolicyId\": \"consumerPolicy\",\n  \"criteria\": [ {\n      \"operandLeft\": \"asset:prop:id\",\n      \"operator\":\"~\",\n      \"operandRight\":\"urn:cx:Skill:consumer:.*\"\n  }]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{consumerEdcControl}}/data/contractdefinitions",
									"host": [
										"{{consumerEdcControl}}"
									],
									"path": [
										"data",
										"contractdefinitions"
									]
								},
								"description": "Calls the datamanagement API in order to create a skill contract."
							},
							"response": []
						},
						{
							"name": "3.8 Check Propagation into Consumer Data Catalogue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){ console.log(\"Wait before catalogue is synchronized.\")}, 60000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contract Offer was propagated\", function () {",
											"    pm.expect(pm.response.code).oneOf([200]);",
											"    pm.expect(pm.response.json().results.bindings.length).gte(1);",
											"    pm.expect(pm.response.json().results.bindings[0].asset.value).eq(\"urn:cx:Skill:consumer:LifetimeGearbox\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/consumer-edc-control/BPNL00000003CQI9> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }",
									"host": [
										"{{consumerAgentPlane}}"
									],
									"path": [
										"api",
										"agent"
									],
									"query": [
										{
											"key": "asset",
											"value": "urn:x-arq:DefaultGraph",
											"description": "the default graph should be compliant",
											"disabled": true
										},
										{
											"key": "query",
											"value": "SELECT ?asset WHERE { <edcs://knowledge.dev.demo.catena-x.net/consumer-edc-control/BPNL00000003CQI9> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset. }"
										}
									]
								},
								"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
							},
							"response": []
						}
					],
					"description": "Integration Tests for Knowledge Agents Framework"
				},
				{
					"name": "01_BTVH",
					"item": [
						{
							"name": "00_KA-216_General_Connectivity_OEM",
							"item": [
								{
									"name": "1 Access Own Catalogue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Own Catalogue Listing Was Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"id\");",
													"    pm.expect(pm.response.json()).to.have.property(\"contractOffers\");",
													"    pm.expect(pm.response.json().contractOffers).to.have.length.gte(0);",
													"    pm.response.json().contractOffers.map(function(contractOffer) {",
													"        pm.expect(contractOffer).to.have.property(\"id\");",
													"        pm.expect(contractOffer).to.have.property(\"policy\");",
													"        pm.expect(contractOffer).to.have.property(\"asset\");",
													"        pm.expect(contractOffer.asset).to.have.property(\"properties\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:id\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:name\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:contenttype\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											}
										],
										"url": {
											"raw": "{{oemEdcConsumerControl}}/data/catalog?providerUrl={{oemEdcIds}}/api/v1/ids/data",
											"host": [
												"{{oemEdcConsumerControl}}"
											],
											"path": [
												"data",
												"catalog"
											],
											"query": [
												{
													"key": "providerUrl",
													"value": "{{oemEdcIds}}/api/v1/ids/data"
												}
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue.\n\nsee [https://jira.catena-x.net/browse/KA-216](https://jira.catena-x.net/browse/KA-216)"
									},
									"response": []
								},
								{
									"name": "2 Query the Provisioning Agent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Provisioning Agent Was Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(16);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length(4);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"vehicle\");",
													"        pm.expect(binding.vehicle).to.have.property(\"type\");",
													"        pm.expect(binding.vehicle).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"van\");",
													"        pm.expect(binding.van).to.have.property(\"type\");",
													"        pm.expect(binding.van).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"aggregate\");",
													"        pm.expect(binding.aggregate).to.have.property(\"type\");",
													"        pm.expect(binding.aggregate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"assembly\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"adaptionValues\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"supplier\");",
													"        pm.expect(binding.supplier).to.have.property(\"type\");",
													"        pm.expect(binding.supplier).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"operatingTime\");",
													"        pm.expect(binding.operatingTime).to.have.property(\"type\");",
													"        pm.expect(binding.operatingTime).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"mileage\");",
													"        pm.expect(binding.mileage).to.have.property(\"type\");",
													"        pm.expect(binding.mileage).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"recordDate\");",
													"        pm.expect(binding.recordDate).to.have.property(\"type\");",
													"        pm.expect(binding.recordDate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"healthType\");",
													"        pm.expect(binding.healthType).to.have.property(\"type\");",
													"        pm.expect(binding.healthType).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"body_count\");",
													"        pm.expect(binding.body_count).to.have.property(\"type\");",
													"        pm.expect(binding.body_count).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"body_classes\");",
													"        pm.expect(binding.body_classes).to.have.property(\"type\");",
													"        pm.expect(binding.body_classes).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"countUnit\");",
													"        pm.expect(binding.countUnit).to.have.property(\"type\");",
													"        pm.expect(binding.countUnit).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"countMethod\");",
													"        pm.expect(binding.countMethod).to.have.property(\"type\");",
													"        pm.expect(binding.countMethod).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"channels\");",
													"        pm.expect(binding.channels).to.have.property(\"type\");",
													"        pm.expect(binding.channels).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?vehicle ?van ?aggregate ?assembly ?supplier ?adaptionValues ?operatingTime ?mileage ?recordDate ?healthType ?project ?body_count ?body_classes ?countUnit ?countMethod ?channels WHERE {\n\n  VALUES (?van ?aggregate ?healthType) { \n      (\"FNLQNRVCOFLHAQ\"^^xsd:string \"Differential Gear\"^^xsd:string \"Clutch\"^^xsd:string) \n      (\"FGPTXINYZAVJYK\"^^xsd:string \"Differential Gear\"^^xsd:string \"Clutch\"^^xsd:string) \n      (\"DVAJDTLJMKKZGY\"^^xsd:string \"Differential Gear\"^^xsd:string \"GearOil\"^^xsd:string) \n      (\"RDUGZNKNCEPLTL\"^^xsd:string \"Differential Gear\"^^xsd:string \"GearSet\"^^xsd:string)  \n  }\n  \n  ?vehicle rdf:type cx:Vehicle;\n           cx:vehicleIdentificationNumber ?van;\n           cx:hasAdaption ?adaption.\n\n  ?adaption cx:vehicleCurrentMileage ?mileage;\n            cx:vehicleOperatingHours ?operatingTime;\n            cx:vehicleCurrentMileage ?mileage;\n            cx:vehicleCurrentStateDateTime ?recordDate;\n            cx:hasValues ?adaptionValues.\n\n  ?assembly rdf:type cx:AssemblyGroup;\n            cx:partName ?aggregate;\n            cx:isPartOf ?vehicle;\n            cx:isProducedBy ?supplier;\n            cx:hasLoadSpectrum ?lc.\n\n  ?lc rdf:type cx:LoadSpectrum;\n      cx:loadSpectrumDescription ?healthType;\n      cx:loadSpectrumType ?body_count;\n      cx:hasLoadSpectrumValues [\n      cx:loadSpectrumChannelIndex ?body_classes; \n      cx:loadSpectrumCountingUnit ?countUnit; \n      cx:loadSpectrumCountingMethod ?countMethod; \n      cx:loadSpectrumChannelValues ?channels ].\n\n  OPTIONAL {\n    ?lc cx:loadSpectrumName ?project\n  }\n} \n"
										},
										"url": {
											"raw": "{{provisioningAgent}}/sparql",
											"host": [
												"{{provisioningAgent}}"
											],
											"path": [
												"sparql"
											]
										}
									},
									"response": []
								},
								{
									"name": "3 Test Federated Data Catalogue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Federated Data Catalogue Was Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"subject\");",
													"        pm.expect(binding.subject).to.have.property(\"type\");",
													"        pm.expect(binding.subject).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"predicate\");",
													"        pm.expect(binding.predicate).to.have.property(\"type\");",
													"        pm.expect(binding.predicate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"object\");",
													"        pm.expect(binding.object).to.have.property(\"type\");",
													"        pm.expect(binding.object).to.have.property(\"value\");",
													"    });",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.subject.value == 'bpn:legal:BPNL00000003CQI9' && binding.predicate.value == 'https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#hasConnector';",
													"        }   ",
													"    )).to.eq(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
													"description": "A local query"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								}
							],
							"description": "see [https://jira.catena-x.net/browse/KA-216](https://jira.catena-x.net/browse/KA-216)"
						},
						{
							"name": "01_KA-217_General_Connectivity_Supplier",
							"item": [
								{
									"name": "1 Access Own Catalogue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Own Catalogue Listing Was Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"id\");",
													"    pm.expect(pm.response.json()).to.have.property(\"contractOffers\");",
													"    pm.expect(pm.response.json().contractOffers).to.have.length.gte(0);",
													"    pm.response.json().contractOffers.map(function(contractOffer) {",
													"        pm.expect(contractOffer).to.have.property(\"id\");",
													"        pm.expect(contractOffer).to.have.property(\"policy\");",
													"        pm.expect(contractOffer).to.have.property(\"asset\");",
													"        pm.expect(contractOffer.asset).to.have.property(\"properties\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:id\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:name\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:contenttype\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{tieraEdcApiKey}}"
											}
										],
										"url": {
											"raw": "{{tieraEdcControl}}/data/catalog?providerUrl={{tieraEdcIds}}/api/v1/ids/data",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"data",
												"catalog"
											],
											"query": [
												{
													"key": "providerUrl",
													"value": "{{tieraEdcIds}}/api/v1/ids/data"
												}
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue.\n\nsee [https://jira.catena-x.net/browse/KA-216](https://jira.catena-x.net/browse/KA-216)"
									},
									"response": []
								},
								{
									"name": "2 Test the HI Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Provisioning Agent Was Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"requestRefId\");",
													"    pm.expect(pm.response.json()).to.have.property(\"healthIndicatorOutputs\");",
													"    pm.expect(pm.response.json().healthIndicatorOutputs).to.have.length(2);",
													"    pm.response.json().healthIndicatorOutputs.map(function(output) {",
													"        pm.expect(output).to.have.property(\"version\");",
													"        pm.expect(output).to.have.property(\"componentId\");",
													"        pm.expect(output).to.have.property(\"healthIndicatorValues\");",
													"        pm.expect(output.healthIndicatorValues).to.have.length.gte(1);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "hi_input",
													"type": "file",
													"src": "/Users/A29078924/Projects/catenax/product-knowledge/dataspace/mock/prognosis/tests/data/sample-hi-input.json"
												}
											]
										},
										"url": {
											"raw": "{{tierABackend}}/api/hi",
											"host": [
												"{{tierABackend}}"
											],
											"path": [
												"api",
												"hi"
											]
										},
										"description": "Invocation of the actual Lifetime Prognosis Service"
									},
									"response": []
								},
								{
									"name": "3 Query the Remoting Agent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Accessing the Remoting Agent Was Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length(1);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"indicatorVersion\");",
													"        pm.expect(binding.indicatorVersion).to.have.property(\"type\");",
													"        pm.expect(binding.indicatorVersion).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"indicatorComponentId\");",
													"        pm.expect(binding.indicatorComponentId).to.have.property(\"type\");",
													"        pm.expect(binding.indicatorComponentId).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"health\");",
													"        pm.expect(binding.health).to.have.property(\"type\");",
													"        pm.expect(binding.health).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx-health: <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#>\n\nSELECT ?indicatorVersion ?indicatorComponentId ?health WHERE   {\n  VALUES ( ?countUnit ?adaptionValues ?channels ?counts ?classes ?assembly ?recordDate ?healthType ?operatingTime ?countMethod ?mileage) {\n  ( \"unit:ONE\" \n    \"[0.2, 0.3, 0.4]\"^^<https://json-schema.org/draft/2020-12/schema#Object> \n    \"[ {\\\\x0A  \\\"unit\\\" : \\\"unit:rpm\\\",\\\\x0A  \\\"numberOfBins\\\" : 128,\\\\x0A  \\\"channelName\\\" : \\\"N_TU\\\",\\\\x0A  \\\"upperLimit\\\" : 12700.0,\\\\x0A  \\\"lowerLimit\\\" : -100.0\\\\x0A}, {\\\\x0A  \\\"unit\\\" : \\\"unit:Nm\\\",\\\\x0A  \\\"numberOfBins\\\" : 128,\\\\x0A  \\\"channelName\\\" : \\\"T_TU\\\",\\\\x0A  \\\"upperLimit\\\" : 1290.0,\\\\x0A  \\\"lowerLimit\\\" : -1270.0\\\\x0A}, {\\\\x0A  \\\"unit\\\" : \\\"unit:ONE\\\",\\\\x0A  \\\"numberOfBins\\\" : 10,\\\\x0A  \\\"channelName\\\" : \\\"Z_GANG\\\",\\\\x0A  \\\"upperLimit\\\" : 9.5,\\\\x0A  \\\"lowerLimit\\\" : -0.5\\\\x0A} ]\" \n    \"{\\\\x0A  \\\"countsList\\\" : [ 8.165716991470617E-8, 2.6589701519696973E-5, 4.996414281777106E-5, 8.877176878741011E-5, 1.2583420902956277E-4, 2.1605499205179513E-4, 5.809103022329509E-4, 8.848882862366736E-4, 0.0011256651487201452, 0.0014202258316799998, 0.0014436225173994899, 0.0016900197369977832, 0.0023243564646691084, 0.0029973441269248724, 0.004415211733430624, 0.004894567653536797, 0.005345028359442949, 0.005830397829413414, 0.010435677133500576, 0.014282779768109322, 0.01441910769790411, 0.015517636202275753, 0.016832217574119568, 0.016946539282798767, 0.01801016554236412, 0.018330466002225876, 0.018912214785814285, 0.020088570192456245, 0.021580204367637634, 0.022674864158034325, 0.02454369328916073, 0.02779177948832512, 0.030732547864317894, 0.03433700650930405, 0.03941313177347183, 0.04150734096765518, 0.04265172779560089, 0.042704273015260696, 0.043251294642686844, 0.04357834905385971, 0.04631785675883293, 0.04637407511472702, 0.04712093621492386, 0.04748912900686264, 0.050515756011009216, 0.05066641792654991, 0.05156601592898369, 0.05449165776371956, 0.056410789489746094, 0.05758173391222954 ],\\\\x0A  \\\"countsName\\\" : \\\"Counts\\\"\\\\x0A}\" \n    \"[ {\\\\x0A  \\\"className\\\" : \\\"N_TU-class\\\",\\\\x0A  \\\"classList\\\" : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 3, 3, 1, 3, 3, 2, 3, 2, 4, 2, 4, 5, 5, 5, 6, 6, 6, 6, 1, 2, 4, 2, 4, 6, 4, 4, 4, 2, 2 ]\\\\x0A}, {\\\\x0A  \\\"className\\\" : \\\"T_TU-class\\\",\\\\x0A  \\\"classList\\\" : [ 62, 65, 63, 63, 64, 63, 67, 64, 64, 64, 66, 65, 64, 65, 65, 64, 64, 62, 65, 65, 65, 62, 62, 64, 66, 62, 62, 62, 63, 66, 65, 65, 62, 62, 67, 62, 62, 62, 66, 64, 65, 62, 62, 62, 62, 66, 66, 66, 62, 65 ]\\\\x0A}, {\\\\x0A  \\\"className\\\" : \\\"Z_GANG-class\\\",\\\\x0A  \\\"classList\\\" : [ 5, 5, 9, 7, 8, 5, 1, 3, 4, 2, 1, 3, 2, 1, 4, 1, 5, 4, 9, 6, 7, 3, 7, 6, 6, 4, 3, 9, 3, 8, 5, 8, 8, 3, 5, 3, 6, 8, 8, 7, 2, 3, 6, 4, 7, 4, 6, 9, 5, 4 ]\\\\x0A} ]\"\n    <urn:uuid:719133c9-d219-4278-b724-9f64efc42b42> \n    \"2022-08-21T12:00:00.000Z\"^^<http://www.w3.org/2001/XMLSchema#dateTime> \n    \"GearSet\" \n    \"1282\"^^<http://www.w3.org/2001/XMLSchema#int> \n    \"LRD\" \n    \"76543\"^^<http://www.w3.org/2001/XMLSchema#int>)     \n   }     \n  \n    ?invocation rdf:type cx-health:HealthIndication;\n            cx-health:requestComponentId ?assembly;\n            cx-health:classifiedLoadCollectiveComponentDescription ?healthType;\n            cx-health:classifiedLoadCollectiveCountingValue ?countValue;\n            cx-health:classifiedLoadCollectiveCountingUnit ?countUnit;\n            cx-health:classifiedLoadCollectiveCountingMethod ?countMethod;\n            cx-health:classifiedLoadCollectiveChannels ?channels;\n            cx-health:classifiedLoadCollectiveClasses ?classes;\n            cx-health:classifiedLoadCollectiveCounts ?counts;\n            cx-health:adaptionValueVersion \"0.6.4\"^^xsd:string; \n            cx-health:adaptionValueTimestamp ?recordDate;\n            cx-health:adaptionValueMileage ?mileage; \n            cx-health:adaptionValueOperatingTime ?operatingTime;\n            cx-health:adaptionValueList ?adaptionValues;\n            cx-health:indicatorVersion ?indicatorVersion;\n            cx-health:responseComponentId ?indicatorComponentId;\n            cx-health:healthIndicatorValues ?health. \n\n} "
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/health",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"health"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								}
							],
							"description": "see [https://jira.catena-x.net/browse/KA-217](https://jira.catena-x.net/browse/KA-217)"
						},
						{
							"name": "02_KA-218_Data_Graph_Asset_OEM",
							"item": [
								{
									"name": "1 Register Data Graph Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Graph Data Asset Is Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:oem:BehaviourTwin\",\n      \"asset:prop:contract\": \"urn:cx:Graph:oem\",\n      \"asset:prop:name\": \"OEM portion of the Behaviour Twin RUL/HI Testdataset.\",\n      \"asset:prop:description\": \"A graph asset/offering mounting Carena-X Testdata for Behaviour Twin.\",\n      \"asset:prop:version\": \"20230124_testdata_new_bamm\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"rdf:type\":\"<https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#GraphAsset>\",\n      \"rdfs:isDefinedBy\": \"<https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/load_spectrum_ontology.ttl>\",\n      \"cx:protocol\": \"<urn:cx:Protocol:w3c:Http#SPARQL>\",\n      \"cx:shape\": \"@prefix : <urn:cx:Graph:oem:BehaviourTwin> .\\n@prefix cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\nOemLoadSpectrum rdf:type sh:NodeShape ;\\n  sh:targetClass cx:LoadSpectrum ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <bpn:legal:BPNL00000003AYRE> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx:Version ;\\n        sh:hasValue 0^^xsd:long ;\\n    ] ;\\n  sh:property [\\n        sh:path cx: ;\\n        sh:class SupplierParts ;\\n    ] ;\\n\\nSupplierParts rdf:type sh:NodeShape ;\\n  sh:targetClass cx:VehicleComponent ;\\n  sh:property [\\n        sh:path cx:isProducedBy ;\\n        sh:hasValue <bpn:legal:BPNL00000003B2OM> ;\\n    ] ;\\n\",\n      \"cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:oem:BehaviourTwin\",\n      \"baseUrl\": \"{{oemProviderAgent2}}/sparql\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\",\n      \"authKey\": \"{{oemBackendAuthKey}}\",\n      \"authCode\": \"{{oemBackendAuthCode}}\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/data/assets",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph asset."
									},
									"response": []
								},
								{
									"name": "2 Create Graph Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Graph Policy Established\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"oemPolicy\",\n  \"policy\": {\n    \"target\": \"urn:cx:Graph:oem:.*\",\n    \"permissions\": [\n        {\n            \"target\": \"urn:cx:Graph:oem:.*\",\n            \"action\": {\n                \"type\": \"USE\"\n            },\n            \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/data/policydefinitions",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"policydefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph policy."
									},
									"response": []
								},
								{
									"name": "3 Define Graph Contract",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\":\"oemOffer\",\n  \"accessPolicyId\": \"oemPolicy\",\n  \"contractPolicyId\": \"oemPolicy\",\n  \"criteria\": [ {\n      \"operandLeft\": \"asset:prop:contract\",\n      \"operator\":\"=\",\n      \"operandRight\":\"urn:cx:Graph:oem\"\n  }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/data/contractdefinitions",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"contractdefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a contract."
									},
									"response": []
								},
								{
									"name": "4 Check Federated Data Catalogue Appearance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check Federated Data Catalogue Appearance\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(1);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(1);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.asset.value == 'urn:cx:Graph:oem:BehaviourTwin';",
													"        }   ",
													"    )).to.eq(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT ?asset WHERE { <edcs://bmw-agent-control-provider.dev.demo.catena-x.net> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset.}",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?asset WHERE { <edcs://bmw-agent-control-provider.dev.demo.catena-x.net> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset.}"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								}
							],
							"description": "see [https://jira.catena-x.net/browse/KA-218](https://jira.catena-x.net/browse/KA-218)"
						},
						{
							"name": "03_KA-219_Function_Graph_Asset_Supplier",
							"item": [
								{
									"name": "1 Register Function Graph Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Function Graph Asset Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{tieraEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:tierA:HealthIndicatorGearbox\",\n      \"asset:prop:contract\": \"urn:cx:Graph:tierA\",\n      \"asset:prop:name\": \"Health Indications Service for Gearboxes\",\n      \"asset:prop:description\": \"Another sample graph asset/offering referring to a specific prognosis resource.\",\n      \"asset:prop:version\": \"0.7.3-SNAPSHOT\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"rdf:type\":\"<https://github.com/catenax-ng/product-knowledge/ontology/common_ontology.ttl#GraphAsset>\",\n      \"rdfs:isDefinedBy\": \"<https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/vehicle_health.ttl>\",\n      \"cx:protocol\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"cx:shape\": \"@prefix : <urn:cx:Graph:tierA:HealthIndicatorGearbox> .\\n@prefix cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> .\\n@prefix PREFIX cx-health: <https://github.com/catenax-ng/product-knowledge/ontology/health.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n :TieraHealthIndication rdf:type sh:NodeShape ;\\n  sh:targetClass cx-health:HealthIndication ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <urn:bpn:legal:BPNL00000003CPIY> ].\\n\",\n      \"cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:tierA:HealthIndicatorGearbox\",\n      \"baseUrl\": \"{{tierARemotingAgent}}/repositories/health\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\",\n      \"authKey\": \"{{supplierBackendAuthKey}}\",\n      \"authCode\": \"{{supplierBackendAuthCode}}\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tieraEdcControl}}/data/assets",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"data",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph asset."
									},
									"response": []
								},
								{
									"name": "2 Create A Graph Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Graph Policy Established\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{tieraEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"tierAPolicy\",\n  \"target\": \"urn:cx:Graph:tierA:.*\",\n  \"policy\": {\n      \"permissions\": [\n        {\n        \"target\": \"urn:cx:Graph:tierA:.*\",\n        \"action\": {\n        \"type\": \"USE\"\n        },\n        \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tieraEdcControl}}/data/policydefinitions",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"data",
												"policydefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph policy."
									},
									"response": []
								},
								{
									"name": "3 Define Graph Contract",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{tieraEdcApiKey}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\":\"tierAOffer\",\n  \"accessPolicyId\": \"tierAPolicy\",\n  \"contractPolicyId\": \"tierAPolicy\",\n  \"criteria\": [ {\n      \"operandLeft\": \"asset:prop:contract\",\n      \"operator\":\"=\",\n      \"operandRight\":\"urn:cx:Graph:tierA\"\n  }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tieraEdcControl}}/data/contractdefinitions",
											"host": [
												"{{tieraEdcControl}}"
											],
											"path": [
												"data",
												"contractdefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a contract."
									},
									"response": []
								}
							]
						},
						{
							"name": "04_KA-220_Skill_Delegation_OEM",
							"item": [
								{
									"name": "1 Check Federated Data Catalogue Appearance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check Federated Data Catalogue Appearance\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(1);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(1);",
													"    pm.expect(pm.response.json().results.bindings.some(",
													"        function(binding) {",
													"            return binding.asset.value == 'urn:cx:Graph:tierA:HealthIndicatorGearbox';",
													"        }   ",
													"    )).to.eq(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?query=SELECT ?asset WHERE { <edcs://dlr-agent-control.dev.demo.catena-x.net> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset.}",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:x-arq:DefaultGraph",
													"description": "the default graph should be compliant",
													"disabled": true
												},
												{
													"key": "query",
													"value": "SELECT ?asset WHERE { <edcs://dlr-agent-control.dev.demo.catena-x.net> <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl%23offersAsset> ?asset.}"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "2 Perform a Remote Skill",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Performing Remote Skill Successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(3);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(0);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"subject\");",
													"        pm.expect(binding.subject).to.have.property(\"type\");",
													"        pm.expect(binding.subject).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"predicate\");",
													"        pm.expect(binding.predicate).to.have.property(\"type\");",
													"        pm.expect(binding.predicate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"object\");",
													"        pm.expect(binding.object).to.have.property(\"type\");",
													"        pm.expect(binding.object).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset={{tieraEdcControl}}%23urn:cx:Graph:tierA:HealthIndicatorGearbox",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "{{tieraEdcControl}}%23urn:cx:Graph:tierA:HealthIndicatorGearbox"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								}
							]
						},
						{
							"name": "05_KA-221_Vehicle_Health_Skill_OEM",
							"item": [
								{
									"name": "1 Register Health Skill",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Vehicle Health Skill Registered\", function () {",
													"    pm.expect(pm.response.code).oneOf([201,200]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/cx_ontology.ttl#>\nPREFIX cx-health: <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/vehicle_health.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX json: <https://json-schema.org/draft/2020-12/schema#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \n\n##########################################################\n# Sample for a Federated (OEM-Deployed) SparQL Skill which\n#  - Jumps right into self-owned telematics assets given a set of candidate VANs, assembly groups and load spectrum types\n#  - Feeds the gathered data into the respective supplier connector/agent to perform a health indication \n# Author: cgjung\n# (c) 2023 Catena-X assocation\n##########################################################\n\nSELECT ?van ?aggregate ?assembly ?healthType ?recordDate ?mileage ?operatingTime ?health WHERE {\n\n    ###\n    # Input parameter declaration \n    ###\n    VALUES (?van ?aggregate ?healthType) { \n      (\"@van\"^^xsd:string \"@aggregate\"^^xsd:string \"@healthType\"^^xsd:string) \n    }\n    \n    ###\n    # This is our own asset; we could also use our (provider) EDC address (requires a second consuming EDC instance)\n    ###\n    SERVICE <{{oemProviderAgent}}/sparql> { \n\n        ###\n        # Lookup vehicle and current telematics header\n        ###\n        ?vehicle rdf:type cx:Vehicle;\n           cx:vehicleIdentificationNumber ?van;\n           cx:hasAdaption [\n                cx:vehicleOperatingHours ?operatingTime;\n                cx:vehicleCurrentMileage ?mileage;\n                cx:vehicleCurrentStateDateTime ?recordDate;\n                cx:hasValues ?adaptionValues\n           ].\n\n        ###\n        # Level-1 Down Traceability to Assembly Groups\n        ###\n        ?assembly rdf:type cx:AssemblyGroup;\n            cx:partName ?aggregate;\n            cx:isPartOf ?vehicle;\n            cx:isProducedBy ?supplier;\n            # Intersect Assembly Group with Telematics Details to get the right load spectrum\n            cx:hasLoadSpectrum [ rdf:type cx:LoadSpectrum;\n                cx:loadSpectrumDescription ?healthType;\n                cx:loadSpectrumType ?channels;\n                \n                ###\n                # and finally obtain the actual measurements (>50kb per instance, aware your web server settings)\n                ###\n                cx:hasLoadSpectrumValues [\n                    cx:loadSpectrumChannelIndex ?classes; \n                    cx:loadSpectrumCountingUnit ?countUnit; \n                    cx:loadSpectrumCountingMethod ?countMethod; \n                    cx:loadSpectrumChannelValues ?counts \n                ]\n            ].\n    }\n\n    ###\n    # Lookup the federated data catalogue (per supplier)\n    ###\n    ?supplier cx:hasConnector ?supplierEDC.\n    ?supplierEDC <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#offersAsset> ?healthIndicatorAsset.\n    ?healthIndicatorAsset rdfs:isDefinedBy <https://raw.githubusercontent.com/catenax-ng/product-knowledge/main/ontology/vehicle_health.ttl> .\n\n   SERVICE ?supplierEDC { \n       GRAPH ?healthIndicatorAsset {\n        ?invocation rdf:type cx-health:HealthIndication;\n                  cx-health:requestComponentId ?assembly;\n                  cx-health:classifiedLoadCollectiveComponentDescription ?healthType;\n                  cx-health:classifiedLoadCollectiveCountingValue ?countValue;\n                  cx-health:classifiedLoadCollectiveCountingUnit ?countUnit;\n                  cx-health:classifiedLoadCollectiveCountingMethod ?countMethod;\n                  cx-health:classifiedLoadCollectiveChannels ?channels;\n                  cx-health:classifiedLoadCollectiveClasses ?classes;\n                  cx-health:classifiedLoadCollectiveCounts ?counts;\n                  cx-health:adaptionValueVersion \"0.6.4\"^^xsd:string; \n                  cx-health:adaptionValueTimestamp ?recordDate;\n                  cx-health:adaptionValueMileage ?mileage; \n                  cx-health:adaptionValueOperatingTime ?operatingTime;\n                  cx-health:adaptionValueList ?adaptionValues;\n                  cx-health:indicatorVersion ?indicatorVersion;\n                  cx-health:responseComponentId ?indicatorComponentId;\n                  cx-health:healthIndicatorValues ?health.    \n       }\n    }\n} # SELECT\n\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:oem:Health",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent",
												"skill"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:oem:Health"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
									},
									"response": []
								},
								{
									"name": "2 Execute Health Indicator Skill",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful Execution of Vehicle Health Skill\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"head\");",
													"    pm.expect(pm.response.json()).to.have.property(\"results\");",
													"    pm.expect(pm.response.json().head).to.have.property(\"vars\");",
													"    pm.expect(pm.response.json().head.vars).to.have.length(8);",
													"    pm.expect(pm.response.json().results).to.have.property(\"bindings\");",
													"",
													"    const reqBody =JSON.parse(pm.request.body.raw);",
													"    expect=reqBody.results.bindings.length;",
													"    expectMin=expect/2;",
													"",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.gte(expectMin);",
													"    pm.expect(pm.response.json().results.bindings).to.have.length.lte(expect);",
													"    pm.response.json().results.bindings.map(function(binding) {",
													"        pm.expect(binding).to.have.property(\"van\");",
													"        pm.expect(binding.van).to.have.property(\"type\");",
													"        pm.expect(binding.van).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"aggregate\");",
													"        pm.expect(binding.aggregate).to.have.property(\"type\");",
													"        pm.expect(binding.aggregate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"assembly\");",
													"        pm.expect(binding.assembly).to.have.property(\"type\");",
													"        pm.expect(binding.assembly).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"healthType\");",
													"        pm.expect(binding.healthType).to.have.property(\"type\");",
													"        pm.expect(binding.healthType).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"recordDate\");",
													"        pm.expect(binding.recordDate).to.have.property(\"type\");",
													"        pm.expect(binding.recordDate).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"mileage\");",
													"        pm.expect(binding.mileage).to.have.property(\"type\");",
													"        pm.expect(binding.mileage).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"operatingTime\");",
													"        pm.expect(binding.operatingTime).to.have.property(\"type\");",
													"        pm.expect(binding.operatingTime).to.have.property(\"value\");",
													"        pm.expect(binding).to.have.property(\"health\");",
													"        pm.expect(binding.health).to.have.property(\"type\");",
													"        pm.expect(binding.health).to.have.property(\"value\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-results+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"head\": { \"vars\": [ \"van\", \"aggregate\", \"healthType\" ]},\n    \"results\": { \"bindings\": [\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FNLQNRVCOFLHAQ\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"QTALZJQURYYQDJ\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FGPTXINYZAVJYK\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"HHXDGSMSUTWFUO\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"RGZCDKEJHDSNCB\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"RDUGZNKNCEPLTL\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"DVAJDTLJMKKZGY\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"VKKTXVZTRKRNSB\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"RHVDQXSXBBZSOV\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"HGWQDJCIGBSKXH\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"ZFYBNQOXEPSETK\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"KHLBGCBEIZGPMH\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"WLPVJZVMWOEACX\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } },\n            {   \"van\": { \"type\": \"literal\", \"value\": \"FVARQFZDICATNV\"},\n                \"aggregate\": { \"type\": \"literal\", \"value\": \"Differential Gear\"},\n                \"healthType\": { \"type\": \"literal\", \"value\": \"Clutch\" } }\n\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemAgentPlane}}/api/agent?asset=urn:cx:Skill:oem:Health",
											"host": [
												"{{oemAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "shit",
													"value": "false",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "urn:cx:Skill:oem:Health"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								}
							]
						}
					],
					"description": "Integration Tests for Behaviour Twin/Vehicle Health implemented with Knowledge Agents"
				}
			]
		},
		{
			"name": "Portal",
			"item": [
				{
					"name": "Access Ontology Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/semantichub/:model",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"semantichub",
								":model"
							],
							"variable": [
								{
									"key": "model",
									"value": "https%3A%2F%2Fraw.githubusercontent.com%2Fcatenax-ng%2Fproduct-knowledge%2Fmain%2Finfrastructure%2Fconsumer%2Fresources%2Fcx-ontology.json"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Ontologies from Repo",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.github.com/repos/catenax-ng/product-knowledge/contents/ontology?ref=release/v0.7.4",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"repos",
								"catenax-ng",
								"product-knowledge",
								"contents",
								"ontology"
							],
							"query": [
								{
									"key": "ref",
									"value": "release/v0.7.4"
								},
								{
									"key": "ref",
									"value": "main",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Website",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://knowledge.dev.demo.catena-x.net/:path",
							"protocol": "https",
							"host": [
								"knowledge",
								"dev",
								"demo",
								"catena-x",
								"net"
							],
							"path": [
								":path"
							],
							"variable": [
								{
									"key": "path",
									"value": "consumer-frontend/static/js/main.31177f6b.js"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Vault",
			"item": [
				{
					"name": "Access Cert",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Vault-Token",
								"value": "{{vaultToken}}"
							}
						],
						"url": {
							"raw": "https://vault.demo.catena-x.net/v1/:folder/data/:secret",
							"protocol": "https",
							"host": [
								"vault",
								"demo",
								"catena-x",
								"net"
							],
							"path": [
								"v1",
								":folder",
								"data",
								":secret"
							],
							"variable": [
								{
									"key": "folder",
									"value": "behaviour-twin-pilot"
								},
								{
									"key": "secret",
									"value": "dlr-daps-cert-dev"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}